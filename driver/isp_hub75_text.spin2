'' =================================================================================================
''
''   File....... isp_hub75_text.spin2
''   Purpose.... control text placement on HUB75 RGB Matrix
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 17 Oct 2020
''
'' =================================================================================================

CON 

' supported Text Sizes
#0, TEXT_SIZE_DEFAULT, TEXT_SIZE__5x7, TEXT_SIZE__8x8

CON { test colors }

    cBlack = $000000
    cWhite = $FFFFFF
    cRed = $FF0000
    cLime = $00FF00
    cBlue = $0000FF
    cYellow = $FFFF00
    cCyan = $00FFFF
    cMagenta = $FF00FF
    cSilver = $C0C0C0
    cGray = $808080
    cMaroon = $800000
    cOlive = $808000
    cGreen = $008000
    cPurple = $800080
    cTeal = $08080
    cNavy = $000080
    cDarkGreen = $006400
    cOrange = $FFA500
    cRedWhtBlu = $deadf0
    cRainbow = $deadf1
    cBlueViolet = $8A2BE2


OBJ

    hardware    : "isp_hub75_hwGeometry"
    panel       : "isp_hub75_panel"
    fonts       : "isp_hub75_fonts"

VAR
    long    currTextColor
    long    cursorRow
    long    cursorColumn
    long    maxTextRows
    long    maxTextColumns
    long    topOffset
    long    verticalGap
    long    charHeight
    long    charWidth
    long    leftOffset
    long    horizontalGap
    long    invertHorizontal

    long    cog

PUB start() : ok
    '' Start the underlying driver(s)
    debug("- TEXT: start()")
    ok := cog := panel.start()   ' send buffer to driver
    if ok == -1
        debug("- TEXT: underlying drivers failed!")
        abort

    setTextSize(TEXT_SIZE_DEFAULT)
    homeCursor()
    setTextColor($AAAAAA)
    clearScreen()

PUB stop()
    '' Stop the underlying driver(s)
    if cog
        panel.stop()
        cog := 0

PUB clearScreen()
    '' Clear the panel to BLACK
    longfill(@screen0, 0, hardware.DISPLAY_SIZE_IN_BYTES / 4)
    commitScreenToPanel()

PUB getScreenSetup() : pScreen
    '' Save the location and size of our external screen buffer
    pScreen := @screen0

PUB fillScreen(rgbColor) | row, column
    '' Fill the display with 24-bit color value
    repeat row from 0 to hardware.MAX_DISPLAY_ROWS - 1
        repeat column from 0 to hardware.MAX_DISPLAY_COLUMNS - 1
            drawPixelAtRC(row, column, rgbColor)

PUB setCursor(row, column)
    '' Position the text cursor to row, column on our display
    ' TODO emit error on bad column/row?
    cursorRow := 0 #> row <# maxTextRows - 1
    cursorColumn := 0 #> column <# maxTextColumns - 1
    
PUB homeCursor()
    '' return the cursor to top left corner of our display
    setCursor(0, 0)

PUB setTextSize(newSize)
    '' Select font and update text grid size 
    ' currently we only support our 8x8 and 5x7 fonts
    case newSize
        TEXT_SIZE_DEFAULT..TEXT_SIZE__5x7:
            topOffset := 0
            verticalGap := 1
            charHeight := 7
            charWidth := 5
            leftOffset := 1
            horizontalGap := 1
            maxTextRows := 4
            maxTextColumns := 10
            invertHorizontal := TRUE

        TEXT_SIZE__8x8:
            topOffset := 2
            verticalGap := 2
            charHeight := 8
            charWidth := 8
            leftOffset := 0
            horizontalGap := 1
            maxTextRows := 3
            maxTextColumns := 7
            invertHorizontal := FALSE

        OTHER:
            debug("*ERROR* unknown text size*")

PUB setTextColor(rgbColor)  
    '' Set 24-bit color for subsequent text display
    currTextColor := rgbColor

PUB setText(zString) 
    '' Place text 'zero terminated' at our current cursor position using current text color
    setColoredTextAtRC(cursorRow, cursorColumn, zString, currTextColor)

PUB setColoredTextAtRC(row, column, pString, rgbColor) | charIndex
    '' Place text at specific cursor position using current text color
    setCursor(row, column)
    charIndex := 0
    repeat 
        if byte[pString][charIndex] <> 0
            setCharWithColor(byte[pString][charIndex++], rgbColor)
    while byte[pString][charIndex] <> 0

PUB setChar(cChar)
    '' Write char to curr cursor position usi g curr text color, increment the cursor position with line wrap
    setCharWithColor(cChar, currTextColor)

PUB setCharWithColor(cChar, rgbColor)
    '' Write char to curr cursor position with given text color, increment the cursor position with line wrap
    setCharAtRCWithColor(cursorRow, cursorColumn, cChar, rgbColor)
    incrCursorWithWrap()


PUB setCharAtRC(row, column, cChar)
    '' Write character to display using current text color
    setCharAtRCWithColor(row, column, cChar, currTextColor)

PUB setCharAtRCWithColor(row, column, cChar, rgbColor) | pCharBitMap, tlScreenOffset, tlCharOffset, cRowIndex, cColumnIndex, sRowPixIndex, sColumnPixIndex, cBitIdx, cByteIdx, cRowBits
    '' Write cChar to display R,C using rgbColor
    'debug("- setChar @RC(", udec_(row), ",", udec_(column), "), char=", uhex_(cChar), ", RGB=", uhex_long_(rgbColor))
    cRowIndex := 0 #> row <# maxTextRows - 1
    cColumnIndex :=  0 #> column <# maxTextColumns - 1
    ' get pointer to character bitmap
    pCharBitMap := getCharAddrForCurrentFont(cChar)
    'debug("- pChar=", uhex_long(pCharBitMap))
    sRowPixIndex := topOffset + (cRowIndex * (charHeight + verticalGap))
    sColumnPixIndex := leftOffset + (cColumnIndex * (charWidth + horizontalGap))

    repeat cByteIdx from 0 to charHeight - 1
        cRowBits := byte[pCharBitMap][cByteIdx]
        'debug("- char row(", udec_(cByteIdx), ") ", ubin(cRowBits))
        repeat cBitIdx from charWidth - 1 to 0
            if (cRowBits & (1 << cBitIdx)) > 0
                if invertHorizontal
                    drawPixelAtRC(sRowPixIndex + cByteIdx, sColumnPixIndex + (charWidth - 1) - cBitIdx, rgbColor)
                else
                    drawPixelAtRC(sRowPixIndex + cByteIdx, sColumnPixIndex + cBitIdx, rgbColor)

PUB drawPixelAtRC(row, column, rgbColor) | xlatedColor, fHue
    '' Place rgbColor pixel at r,c
    xlatedColor := rgbColor
    if rgbColor == cRainbow
        xlatedColor := rgbColorFromDegrees(6 * (column + 1))   ' replace '360 / 64' with 6 [was resulting in 5 vs. 6]
    'elses
	'if rgbColor == cRedWhtBlu
     '   case column // 3
     '       0: xlatedColor := cRed
    '       1: xlatedColor := cWhite
     '       2: xlatedColor := cBlue

    drawPixelAtRCwithRGB(row, column, rgbForCValue(xlatedColor))

PUB drawPixelAtRCwithRGB(row, column, red, green, blue) | rowIndex, columnIndex, colorOffset, pColor
    '' Place r,g,b color pixel at r,c
    rowIndex := 0 #> row <# hardware.MAX_DISPLAY_ROWS - 1
    columnIndex :=  0 #> column <# hardware.MAX_DISPLAY_COLUMNS - 1
    colorOffset := ((rowIndex * hardware.MAX_DISPLAY_COLUMNS * hardware.DISPLAY_BYTES_PER_COLOR) + (columnIndex * hardware.DISPLAY_BYTES_PER_COLOR))
    pColor := @byte[@screen0][colorOffset]
    'if isDebugLocn(rowIndex, columnIndex)
    '    debug("- Screen RC=(", udec_(rowIndex), ", ", udec_(columnIndex), "), ofs=", udec_(colorOffset), ", RGB=(", uhex_(red), uhex_(green), uhex_(blue), ")")
    byte[pColor][0] := red
    byte[pColor][1] := green
    byte[pColor][2] := blue

PUB commitScreenToPanel()
    '' Write sceen to panel driver
    debug("- TEXT: commit!")
    panel.loadScreen(@screen0)

PUB cValueForRGB(red, green, blue) : combinedValue
    '' CONVERT: r,g,b to combined value
    combinedValue := ((red & $ff) << 16) | ((green & $ff) << 8) | (blue & $ff)

PUB rgbForCValue(combinedValue) : red, green, blue
    '' CONVERT: combined color value to r,g,b
    red := (combinedValue & $ff0000) >> 16
    green := (combinedValue & $ff00) >> 8
    blue := (combinedValue & $ff)


PRI incrCursorWithWrap() | priorRow, priorCol
    ' increment cursor position, wrapping at end of line when needed
    priorRow := cursorRow
    priorCol := cursorColumn
    cursorColumn++
    if cursorColumn > maxTextColumns - 1
        cursorColumn := 0
        cursorRow++
        if cursorRow > maxTextRows - 1
            cursorRow := 0
    'debug("incr curPOS RC(", udec_(priorRow), ",", udec_(priorCol), ") -> RC(", udec_(cursorRow), ",", udec_(cursorColumn), ")")

PRI getCharAddrForCurrentFont(cChar) : pCharBitmap
    if charWidth > 5
        pCharBitmap := fonts.getAddrFor8x8Char(cChar)
    else
        pCharBitmap := fonts.getAddrFor5x7Char(cChar)
        
PRI isDebugLocn(nRow, nCol) : status
    status := FALSE
    if (nRow == 31 && nCol < 4) || (nRow < 2 && nCol < 3) || (nRow == 31 && nCol > 61) || (nRow < 2 && nCol > 61)
    'if (nRow  > 29)
        status := TRUE ' FALSE  ' turn off debug

PRI rgbColorFromDegrees(degrees) : rcbColor | offset60, fract60, red, green, blue
    degrees := degrees // 360   ' ensure 0-359
    red := green := blue:= 0
    offset60 := degrees // 60   ' 0-59
    fract60 := 255 * 100 / 60
    if degrees >= 300
        red := 255
        blue := ((59 - offset60) * fract60) / 100
    elseif degrees >= 240
        blue := 255
        red := (offset60 * fract60) / 100
    elseif degrees >= 180
        blue := 255
        green := ((59 - offset60) * fract60) / 100
    elseif degrees >= 120
        green := 255
        blue := (offset60 * fract60) / 100
    elseif degrees >= 60
        green := 255
        red := ((59 - offset60) * fract60) / 100
    else 
        red := 255
        green := (offset60 * fract60) / 100
    {
    fract60 := 4.25 ' float(255 / 60)  ' 4.25             ' 255 / 60
    if degrees >= 300
        red := 255
        blue := (59 - offset60) * fract60
    elseif degrees >= 240
        blue := 255
        red := offset60 * fract60
    elseif degrees >= 180
        blue := 255
        green := (59 - offset60) * fract60
    elseif degrees >= 120
        green := 255
        blue := offset60 * fract60
    elseif degrees >= 60
        green := 255
        red := (59 - offset60) * fract60
    else 
        red := 255
        green := offset60 * fract60
    }
    rcbColor := cValueForRGB(red, green, blue)
    'debug("- degrees=", udec_(degrees), ", color=", uhex_long_(rcbColor), " RGB=", udec_(red), ", ", udec_(green), ", ", udec_(blue), ")" )


DAT { one or more screens of 64x32-24bit color }

screen0     long    0[hardware.DISPLAY_SIZE_IN_BYTES / 4]  ' 6kB buffer (4 bytes / long)

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
 
}}

