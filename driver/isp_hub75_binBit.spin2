'' =================================================================================================
''
''   File....... isp_hub75_binDigit.spin2
''   Purpose.... manipulate a column of 4-bits representing a single digit
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 24 Oct 2020
''
'' =================================================================================================

CON

' various states of fill
#0, STATE_UNKNOWN, STATE_FILLING_1, STATE_FILLING_2, STATE_FILLING_3, STATE_FILLING_4, STATE_FULL, STATE_EMPTYING_4, STATE_EMPTYING_3, STATE_EMPTYING_2, STATE_EMPTYING_1, STATE_EMPTY

OBJ

    screen      : "isp_hub75_screenAccess"
    color       : "isp_hub75_color"

DAT { initialized data }


VAR { globals }
    long    topRow
    long    leftColumn
    long    bitHeight
    long    bitWidth

    long    desiredEndState
    long    currentState
    long    nextState

    long    fullRgbColor
    long    emptyRgbColor
    
    byte    isSetup
    byte    currValue
    
PUB null()
    '' This is NOT a top level object

PUB placeBitAtRC(row, column, value, fullColor, emptyColor) | bitIndex
    'debug("bit:place @RC(", udec_(row), ",", udec_(column), ") ", uhex_long(fullColor), uhex_long(emptyColor))
    if NOT isSetup
        initialize()
    topRow := row
    leftColumn := column
    fullRgbColor := fullColor
    emptyRgbColor := emptyColor
    currValue := value
    drawBit(topRow, leftColumn, emptyColor)

PUB setValue(bit) | newEndState
    '' set a new value for this column [0-15]
    'debug("dig:setValue ", ubin(digit))
    newEndState := (bit > 0) ? STATE_FULL : STATE_EMPTY
    if desiredEndState <> newEndState
        moveBitToState(newEndState)

PUB isMovementComplete() : status
    '' Return T/F where T means that all movement for this bit is complete
    status := (desiredEndState == currentState)

PUB animateStep() 
    '' Do one animation step, if one is pending
    if not isMovementComplete()
        updateBitToState(nextState)

PUB moveBitToState(newEndState) 
    '' Start sequence of segment updates to desired state (on/off)
    'debug("bit:id(bit", udec_(currValue), "), curr-st", udec_(currentState), " moveTo (st", udec_(desiredEndState), ") -> (st", udec_(newEndState), ")")
    ' if we are asking to be in a different state then...
    if desiredEndState <> newEndState
        ' if we are not yet at an end state (still moving) then abort
        if currentState <> STATE_EMPTY && currentState <> STATE_FULL
            debug("SEG: state still in motion, ignoring request")
            abort
        if newEndState <> STATE_EMPTY && newEndState <> STATE_FULL
            debug("SEG: BAD end-state must be EMPTY or FULL!")
            abort        
        if newEndState == STATE_FULL
            ' empty filling up
            nextState := STATE_FILLING_1    ' heading to _4 then FULL
        else
            ' full emptying
            nextState := STATE_EMPTYING_4  ' heading to _1 then EMPTY
        updateBitToState(nextState)
        desiredEndState := newEndState
    else
        debug("  -- already in desiredEndState?")

PRI updateBitToState(newState)
    'debug("bit:id(bit", udec_(currValue), "), moveTo (st", udec_(currentState), ") -> (st", udec_(newState), ")")
    if newState <> STATE_FULL
        ' clear the bit
        fillBit(bitHeight, emptyRgbColor)
    ' now draw bit lines that are showing
    case newState
        STATE_FILLING_1:   ' 1 line filled
                fillBit(bitHeight - 4, fullRgbColor)
                nextState := STATE_FILLING_2
        STATE_FILLING_2:   ' 2 lines filled
                fillBit(bitHeight - 3, fullRgbColor)
                nextState := STATE_FILLING_3
        STATE_FILLING_3:   ' 3 lines filled
                fillBit(bitHeight - 2, fullRgbColor)
                nextState := STATE_FILLING_4
        STATE_FILLING_4:   ' 3 lines filled
                fillBit(bitHeight - 1, fullRgbColor)
                nextState := STATE_FULL
        STATE_FULL:   ' all lines filled
                fillBit(bitHeight, fullRgbColor)
        STATE_EMPTYING_4:  ' 4 lines empty
                fillBit(bitHeight - 1, fullRgbColor)
                nextState := STATE_EMPTYING_3
        STATE_EMPTYING_3:  ' 3 lines empty
                fillBit(bitHeight - 2, fullRgbColor)
                nextState := STATE_EMPTYING_2
        STATE_EMPTYING_2:  ' 2 lines empty
                fillBit(bitHeight - 3, fullRgbColor)
                nextState := STATE_EMPTYING_1
        STATE_EMPTYING_1:  ' 1 line empty
                fillBit(bitHeight - 4, fullRgbColor)
                nextState := STATE_EMPTY
        STATE_EMPTY:  ' nothing to do since we clear segment first
        OTHER:
            debug("STATE(vrtL) not yet implemented (", udec_(newstate), ")")
    currentState := newState

' FIXME: UNDONE state changes would be faster if we filled or cleared just the lines that changed!

PRI initialize()
    isSetup := TRUE
    bitHeight := 4
    bitWidth := 5
    desiredEndState := nextState := currentState := STATE_EMPTY

PRI fillBit(level, rgbColor) | rowIndex, rowBottom, rowTop
    if level > 0
        rowBottom := topRow + bitHeight - 1
        rowTop := rowBottom - (level - 1)
        repeat rowIndex from rowBottom to rowTop
            drawLine(rowIndex, leftColumn, rowIndex, leftColumn + bitWidth - 1, rgbColor)

PRI drawBit(row, column, rgbColor) | rowIndex
    'debug("dig:drawBit @RC(", udec_(row), ",", udec_(column), ") ", uhex_long(rgbColor))
    repeat rowIndex from row to bitHeight + row - 1
        drawLine(rowIndex, column, rowIndex, column + bitWidth - 1, rgbColor)

PRI drawLine(fmRow, fmColumn, toRow, toColumn, rgbColor) | row, column
    'debug("seg:drwLn fmRC=(", udec_(fmRow), ",", udec_(fmColumn), "), toRC=(", udec_(toRow), ",", udec_(toColumn), "), RGB=(", uhex_long(rgbColor), ")")
    fmRow :=  0 #> fmRow <# screen.MAX_DISPLAY_ROWS - 1
    fmColumn :=  0 #> fmColumn <# screen.MAX_DISPLAY_COLUMNS - 1
    toRow :=  0 #> toRow <# screen.MAX_DISPLAY_ROWS - 1
    toColumn :=  0 #> toColumn <# screen.MAX_DISPLAY_COLUMNS - 1
    if fmRow == toRow
        ' draw Horizontal Line
        repeat column from fmColumn to toColumn 
            drawPixelAtRCwithRGB(fmRow, column, color.rgbForCValue(rgbColor))
    elseif fmColumn == toColumn
        ' draw Vertical Line
        repeat row from fmRow to toRow 
            drawPixelAtRCwithRGB(row, fmColumn, color.rgbForCValue(rgbColor))
    else
        debug("DIAG lines not implemented !")
        abort

PUB drawPixelAtRCwithRGB(row, column, red, green, blue) | rowIndex, columnIndex, colorOffset, pColor
    '' Place r,g,b colored pixel at r,c
    rowIndex := 0 #> row <# screen.MAX_DISPLAY_ROWS - 1
    columnIndex :=  0 #> column <# screen.MAX_DISPLAY_COLUMNS - 1
    colorOffset := ((rowIndex * screen.MAX_DISPLAY_COLUMNS) + columnIndex) * screen.DISPLAY_BYTES_PER_COLOR
    pColor := @byte[screen.screenAddress()][colorOffset]
    'if isDebugLocn(rowIndex, columnIndex)
        'debug("- Screen RC=(", udec_(rowIndex), ", ", udec_(columnIndex), "), ofs=", udec_(colorOffset), ", RGB=(", uhex_(red), uhex_(green), uhex_(blue), ")")
    byte[pColor][0] := color.correctedColor(red)
    byte[pColor][1] := color.correctedColor(green)
    byte[pColor][2] := color.correctedColor(blue)


CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
 
}}

