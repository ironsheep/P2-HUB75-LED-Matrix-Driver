'' =================================================================================================
''
''   File....... demo_hub75_multiPanel.spin2
''   Purpose.... Top-level Demonstration - showing off our HUB75 matrix access to individual panels
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2021 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Apr 2021
''   Updated.... 10 Nov 2022
''
'' =================================================================================================


CON { timing }

  CLK_FREQ = 335_000_000                                        ' system freq as a constant 2.985 nSec
  'CLK_FREQ = 250_000_000                                        ' system freq as a constant 2.985 nSec
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { DEBUG PINs }

'DEBUG_PIN = 0
DEBUG_COGS = %11111111
DEBUG_BAUD = 2_000_000

VAR

    long    cog
    long    chainIndex
    long    demoPausePeriod
    long    scrollPeriod
    long    textSize

OBJ

    color       :   "isp_hub75_color"
    colorUtils  :   "isp_hub75_colorUtils"
    pixels      :   "isp_hub75_screenUtils"
    hub75Bffrs  :   "isp_hub75_hwBufferAccess"
    display     :   "isp_hub75_display"
    user        :   "isp_hub75_hwPanelConfig"           ' hardware config common to all demos
    scrnBuffers :   "isp_hub75_hwBuffers"               ' the large buffers storing pixel data

CON { DEMO info }

' 11 enables .bmp file display
DEMO_COUNT = 3

#0, PNL_BOT_LT, PNL_BOT_RT, PNL_TOP_LT, PNL_TOP_RT

    OFS_TOP_PIX = 20

    CLK_HEIGHT = 30
    CLK_WIDTH = 30

DAT

panelIdMessage  byte    "Pn",0

PUB main() : ok | demoIndex, bDidDemo, pnlIdx
    '' start underlying drivers and run demo

    'repeat

    'debug("`term temp size 82 50 textsize 10")
    hub75Bffrs.configure(hub75Bffrs.HUB75_ADAPTER_1, user.DISP0_ADAPTER_BASE_PIN, user.DISP0_PANEL_DRIVER_CHIP, user.DISP0_PANEL_ADDR_LINES)
    chainIndex := hub75Bffrs.indexForHub75ChainId(hub75Bffrs.HUB75_ADAPTER_1)

    ' startup our backend COG(s)
    display.setBufferPointers(chainIndex, scrnBuffers.chain0Ptrs())
    ok := cog := display.start(chainIndex)   ' send buffer to driver
    if ok == -1
        debug("- DEMO: underlying driver failed!")
        abort

    display.clearScreenBuffer()
    'display.fillScreenNoPWM(color.BASE_RED)
    'display.fillScreenNoPWM(color.BASE_GREEN)
    'display.fillScreenNoPWM(color.BASE_BLUE)
    display.fillScreenNoPWM(color.BASE_WHITE)
    display.commitScreenToPanelSet()
    waitSec(120)

    'placeClock()  ' broken
    display.clearScreenBuffer()
    display.setTextColor(color.cRed)
    display.drawCircle(30,30,15)
    display.setTextColor(color.cYellow)
    display.drawPanelBox(0, 4, 4, 30, 30, FALSE)
    display.setCursorOnPanel(6, 1, 0)
    display.setTextAtCursor(@lblZro)
    display.drawPanelBox(1, 4, 4, 30, 30, FALSE)
    display.setCursorOnPanel(6, 1, 1)
    display.setTextAtCursor(@lblOne)
    display.drawPanelBox(2, 4, 4, 30, 30, FALSE)
    display.setCursorOnPanel(6, 1, 2)
    display.setTextAtCursor(@lblTwo)
    display.drawPanelBox(3, 4, 4, 30, 30, FALSE)
    display.setCursorOnPanel(6, 1, 3)
    display.setTextAtCursor(@lblThr)
    display.commitScreenToPanelSet()

    waitSec(120)
    stop()

{x
    demoPausePeriod := 3   ' seconds
    scrollPeriod := 1

    repeat 20
        repeat demoIndex from 0 to DEMO_COUNT - 1
            'waitSec(1)
            case demoIndex + 1
'                1: demoPanelColors()
'                2: demoTopBottomScroll()
'                   bDidDemo := TRUE
'                3: demoRandomPanelColors()
                4: demoPanelFillColors()
                   bDidDemo := TRUE
'                5: demoColorPalette12Panels()
'                6: showFullColorSweep()
'                7: demoTest12x9ColorBrightness()
'                8: colorBlast()
'                9: demoText()
'               10: demoScreenBlast()
'               11: demoBmpFileLoad()
            if bDidDemo
              waitSec(demoPausePeriod)
'}
    stop()

PRI stop()
    ' Stop the driver
    if cog
        display.stop()
        cog := 0

PRI waitSec(countSeconds)
    '' wait for N seconds
    repeat countSeconds
        waitms(1000)

PRI wait1000thSecs(count)
    '' wait for N 1000ths of a second
    repeat count
        waitms(1)  ' 1/100 seconds

PUB placeClock()

    display.setTextColor(color.cYellow)
    debug("placeClock()")
    display.clearScreenBuffer()
    placeDigit(OFS_TOP_PIX, 0)
    'placeDigit(OFS_TOP_PIX, 64)
    'placeDigit(OFS_TOP_PIX, 132)
    'placeDigit(OFS_TOP_PIX, 197)
    display.commitScreenToPanelSet()

PUB placeDigit(rowOffset, colOffset) | row, column
    debug("placeDigit(", udec_(rowOffset), ", ", udec_(colOffset), ")")
    row := rowOffset
    column := colOffset

    repeat 2
        debug("box(", udec_(row), ", ", udec_(column), ")")
        display.drawBox(row, column, CLK_WIDTH, CLK_HEIGHT, false)
        row += CLK_HEIGHT + 1
    return

    row := rowOffset
    column += CLK_WIDTH + 1
    repeat 3
        debug("box(", udec_(row), ", ", udec_(column), ")")
        display.drawBox(row, column, CLK_WIDTH, CLK_HEIGHT, false)
        row += CLK_HEIGHT + 1


PRI demoPanelFillColors()
    display.clearScreenBuffer()
    repeat 4
        display.fillScreenNoPWM(color.BASE_RED)    ' full single color panel NO pwm
        waitSec(2)
        display.fillScreenNoPWM(color.BASE_GREEN)    ' full single color panel NO pwm
        waitSec(2)
        display.fillScreenNoPWM(color.BASE_BLUE)    ' full single color panel NO pwm
        waitSec(2)
        display.fillScreenNoPWM(color.BASE_WHITE)    ' full single color panel NO pwm
        waitSec(4)


PRI demoRandomPanelColors() | panelIndex, panelHue, panelColor

    display.clearScreenBuffer()
    repeat 20
        repeat hub75Bffrs.maxPanels(chainIndex) with panelIndex
            panelHue := (getrnd() +// 254) + 1
            panelColor := colorUtils.rgbColorFromDegrees(panelHue)
            display.fillPanel(panelIndex, panelColor)
        ' update our screen
        display.commitScreenToPanelSet()
        waitSec(2)

DAT { panel messages }

lblTopLt      byte    "TL", 0
lblBotLt      byte    "BL", 0
lblTopRt      byte    "TR", 0
lblBotRt      byte    "BR", 0
lblZro      byte    "(0)", 0
lblOne      byte    "(1)", 0
lblTwo      byte    "(2)", 0
lblThr      byte    "(3)", 0

PRI demoColorPanels()
    ' start with blank screen on which to draw
    display.clearScreenBuffer()

    ' set our font and color
    textSize := display.TEXT_FONT_5x7_DITH
    display.setTextFont(textSize)    ' font size
    display.setTextColor(color.cBlueViolet)

    display.fillPanel(PNL_BOT_RT, color.cGreen)
    display.setCursorOnPanel(6, 1, PNL_BOT_RT)
    display.setTextAtCursor(@lblBotRt)

    display.fillPanel(PNL_BOT_LT, color.cRed)
    display.setCursorOnPanel(6, 1, PNL_BOT_LT)
    display.setTextAtCursor(@lblBotLt)

    display.fillPanel(PNL_TOP_RT, color.cYellow)
    display.setCursorOnPanel(6, 1, PNL_TOP_RT)
    display.setTextAtCursor(@lblTopRt)

    display.fillPanel(PNL_TOP_LT, color.cCyan)
    display.setCursorOnPanel(6, 1, PNL_TOP_LT)
    display.setTextAtCursor(@lblTopLt)

    display.commitScreenToPanelSet()

PRI demoTopBottomScroll() | scrollerID, startTime

    textSize := display.TEXT_FONT_8x8A
    'textSize := display.TEXT_FONT_8x8B
    display.setTextFont(textSize)    ' font size
    display.setTextColor(color.cBlueViolet)

    ' start with blank screen on which to draw
    display.clearScreenBuffer()

    display.fillPanel(PNL_BOT_RT, color.cGreen)
    display.setCursorOnPanel(6, 1, PNL_BOT_RT)
    display.setTextAtCursor(@lblBotRt)

    display.fillPanel(PNL_BOT_LT, color.cRed)
    display.setCursorOnPanel(6, 1, PNL_BOT_LT)
    display.setTextAtCursor(@lblBotLt)

    display.fillPanel(PNL_TOP_RT, color.cYellow)
    display.setCursorOnPanel(6, 1, PNL_TOP_RT)
    display.setTextAtCursor(@lblTopRt)

    display.fillPanel(PNL_TOP_LT, color.cCyan)
    display.setCursorOnPanel(6, 1, PNL_TOP_LT)
    display.setTextAtCursor(@lblTopLt)

    ' get scroller initialized with text to scroll and direction
    scrollerID := display.scrollColoredTextOnLnOfNPanels(4, PNL_TOP_LT, 4, string("Multi-panel long test scroll   "), display.DIR_TO_LEFT, color.cBlue)
    ' configure scroll repeat count
    display.configureScrollLoopCount(scrollerID, display.SCROLL_N_TIMES, 2)

    ' update our screen
    display.commitScreenToPanelSet()

    ' delay to first movement
    'wait1000thSecs(scrollPeriod)

    ' loop while scrolling finishes
    repeat while NOT display.isScrollingComplete()
        ' move the text
        'startTime := getct()
        display.animateScroll()
        'showDuration(startTime, string("top:ANI"))
        ' commit to screen
        'startTime := getct()
        display.commitScreenToPanelSet()
        'showDuration(startTime, string("top:ANI-wr"))

        ' delay to next movement
        'wait1000thSecs(scrollPeriod)


PRI demoPanelColors() | panelIndex, panelHueWidth, panelColor, boxColor, hueIndex, maxPanels

    maxPanels := hub75Bffrs.maxPanels(chainIndex)
    debug("maxPanels: ", udec_(maxPanels))
    panelHueWidth := 256 / maxPanels
    debug("panelHueWidth: ", udec_(panelHueWidth))
    ' set up text subsystem
    'textSize := display.TEXT_FONT_5x7
    textSize := display.TEXT_FONT_8x8A
    'textSize := display.TEXT_FONT_8x8B
    display.setTextFont(textSize)    ' font size
    display.setTextColor(color.cBlueViolet)
    display.setCursor(0, 0)   ' start at top left, with one pixel of spacing

    ' start with blank screen on which to draw
    display.clearScreenBuffer()

    panelIndex := 0

    repeat panelIndex from 0 to maxPanels - 1
        ' color the panel
        hueIndex := panelIndex + 1
        if hueIndex > maxPanels - 1
            hueIndex -= maxPanels
        panelColor := colorUtils.rgbColorFromDegrees(panelHueWidth * hueIndex)
        display.fillPanel(panelIndex, panelColor)
        ' number the panel
        display.setCursorOnPanel(1,1, panelIndex)
        byte [@panelIdMessage][1] := panelIndex + $30
        display.setTextAtCursor(@panelIdMessage)
        ' draw a colored box in panel (don't use panel color)
        hueIndex := panelIndex + 3
        if hueIndex > maxPanels - 1
            hueIndex -= maxPanels
        boxColor := colorUtils.rgbColorFromDegrees(panelHueWidth * hueIndex)
        display.drawPanelBoxOfColor(panelIndex, 17, 10, 40, 34, TRUE, boxColor)
    display.commitScreenToPanelSet()

PRI showDuration(startTimeValue, pFuncTitle) | duration, converted
    duration := getct() - startTimeValue
    converted := muldiv64(duration, 1_000_000, clkfreq)
    debug("- elapsed ", zstr_(pFuncTitle), ": ", udec_(converted), " uSec")


CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2021 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
