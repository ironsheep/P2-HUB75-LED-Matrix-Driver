'' =================================================================================================
''
''   File....... isp_hub75_color.spin2
''   Purpose.... Provide utility color routines
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 24 Oct 2020
''
'' =================================================================================================

CON { test colorset }

    cBlack = $000000
    cWhite = $FFFFFF
    cRed = $FF0000
    cLime = $00FF00
    cBlue = $0000FF
    cYellow = $FFFF00
    cCyan = $00FFFF
    cMagenta = $FF00FF
    cSilver = $C0C0C0
    cGray = $808080
    cMaroon = $800000
    cOlive = $808000
    cGreen = $008000
    cPurple = $800080
    cTeal = $08080
    cNavy = $000080
    cDarkGreen = $006400
    cOrange = $FFA500
    cBlueViolet = $8A2BE2

    ' SPECIAL non-colors - invoke alforithm to gerate actual color used'
    cRedWhtBlu = $deadf0
    cRainbow = $deadf1

    #0, LED_UNKNOWN, LED_RED, LED_GREEN, LED_BLUE

OBJ

    screen      : "isp_hub75_screenAccess"

DAT { driver controls for testing }

bGammaEnable BYTE   TRUE

PUB null()

    '' This is not a top level object


PUB setBrightness(newBrightness)
    '' Set the global brightness value
    defaultBrightness := newBrightness

PUB getBrightness() : brightness
    '' Return the global brightness value
    brightness := defaultBrightness

PUB correctedColor(color) : adjustedColor
    '' Correct a color using generic gamma
    adjustedColor := color
    'return
    'adjustedColor := ((color * defaultBrightness) >> 8) & $ff
    adjustedColor := byte[@gamma][adjustedColor]
    adjustedColor := dutyCycleForIntensity(adjustedColor)

PUB gammaPeek(color) : adjustedColor | gammmaIndex, lowColor, highColor
    '' Return index of nearest matching value in gamma table
    if bGammaEnable
        adjustedColor := byte[@gamma][color]
        repeat gammmaIndex from 0 to 255
            if BYTE[@gamma][gammmaIndex] > color
                quit
        if gammmaIndex == 0
            adjustedColor := 0
        lowColor := BYTE[@gamma][gammmaIndex - 1]
        highColor := BYTE[@gamma][gammmaIndex]
        if lowColor == color
            adjustedColor := gammmaIndex - 1
        elseif highColor == color
            adjustedColor := gammmaIndex
        else
            if color - lowColor > highColor - color
                adjustedColor := gammmaIndex
            else
                adjustedColor := gammmaIndex - 1
    else
        adjustedColor := color

PUB correctedSingleColor(led, colorValue) : adjustedColor | pGammaTable
    '' Correct the color for a specific LED (R, G, or B)
    adjustedColor := colorValue
    'adjustedColor := ((adjustedColor * defaultBrightness) >> 8) & $ff
    case led
        LED_RED:
            pGammaTable := @gamma
        LED_GREEN:
            pGammaTable := @gamma
        LED_BLUE:
            pGammaTable := @gamma
        other:
            abort

    if bGammaEnable
        adjustedColor := byte[pGammaTable][adjustedColor]
    adjustedColor := dutyCycleForIntensity(adjustedColor)

PUB rgbColorFromDegrees(degrees) : rcbColor | offset60, fract60, red, green, blue
    '' CONVERT: 0-355 degrees to color
    degrees := degrees // 360   ' ensure 0-359
    red := green := blue:= 0
    offset60 := degrees // 60   ' 0-59
    fract60 := (255 * 100) / 60
    if degrees >= 300
        red := 255
        blue := ((59 - offset60) * fract60) / 100
    elseif degrees >= 240
        blue := 255
        red := (offset60 * fract60) / 100
    elseif degrees >= 180
        blue := 255
        green := ((59 - offset60) * fract60) / 100
    elseif degrees >= 120
        green := 255
        blue := (offset60 * fract60) / 100
    elseif degrees >= 60
        green := 255
        red := ((59 - offset60) * fract60) / 100
    else
        red := 255
        green := (offset60 * fract60) / 100

    rcbColor := cValueForRGB(red, green, blue)
    'debug("- degrees=", udec_(degrees), ", color=", uhex_long_(rcbColor), " RGB=", udec_(red), ", ", udec_(green), ", ", udec_(blue), ")" )


PUB rgbForCValue(combinedValue) : red, green, blue
    '' CONVERT: combined color value to r,g,b
    red := (combinedValue & $ff0000) >> 16
    green := (combinedValue & $ff00) >> 8
    blue := (combinedValue & $ff)

PUB cValueForRGB(red, green, blue) : combinedValue
    '' CONVERT: r,g,b to combined value
    combinedValue := ((red & $ff) << 16) | ((green & $ff) << 8) | (blue & $ff)

PUB dutyCycleForIntensity(hex8bit) : pwmBits
    '' CALCULATE: proper duty cycle for intensity of 0-255
    '         --- VERSION 1 - Bits spread throughout ---
    if hex8bit == 255
        pwmBits := $ff
    else
        pwmBits := hex8bit / screen.MAX_PWM_FRAMES



DAT { tables, default values }

defaultBrightness   word    256  '256      ' 205 = 80%  [0-255,256]   where 256 is NO brightness adjustment

' Gamma curve (lookup table)

' REF https://gist.github.com/hexagon5un/3df734ad08d8dc8d9ace0491ef97cc58
'{
gamma   byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        byte 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2
        byte 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5
        byte 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10
        byte 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17
        byte 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26
        byte 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38
        byte 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51
        byte 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67
        byte 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86
        byte 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107
        byte 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 130, 131
        byte 133, 134, 136, 138, 139, 141, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158
        byte 160, 161, 163, 165, 167, 169, 170, 172, 174, 176, 178, 180, 182, 183, 185, 187
        byte 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 218, 220
        byte 222, 224, 226, 228, 230, 233, 235, 237, 239, 241, 244, 246, 248, 250, 253, 255
'}

{
' REF Rayman code: http://www.rayslogic.com/propeller/Programming/AdafruitRGB/AdafruitRGB.htm
gammaOld   byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5
        byte 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14
        byte 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25
        byte 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40
        byte 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 59, 60
        byte 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84
        byte 85, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 108, 109, 111
        byte 112, 114, 115, 117, 119, 120, 122, 123, 125, 127, 128, 130, 132, 133, 135, 137, 138
        byte 140, 142, 144, 145, 147, 149, 151, 153, 155, 156, 158, 160, 162, 164, 166, 168, 170
        byte 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 197, 199, 201, 203, 205
        byte 207, 210, 212, 214, 216, 219, 221, 223, 226, 228, 230, 233, 235, 237, 240, 242, 245
        byte 247, 250, 252, 255

gamma2_0
        ' 256-step brightness table: gamma = 2.0
        byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1
        byte	1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4
        byte	4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9
        byte	9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16
        byte	16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24
        byte	25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35
        byte	36, 37, 38, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48
        byte	49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63
        byte	64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80
        byte	81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99
        byte	100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120
        byte	121, 123, 124, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143
        byte	145, 146, 148, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 168
        byte	170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195
        byte	197, 199, 200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224
        byte	226, 228, 230, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255
'}

gammaRed
        ' 256-step brightness table: gamma = 2.2
	byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
	byte	1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2
	byte	3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6
	byte	6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12
	byte	12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19
	byte	20, 20, 21, 22, 22, 23, 23, 24, 25, 25, 26, 26, 27, 28, 28, 29
	byte	30, 30, 31, 32, 33, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41
	byte	42, 43, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55
	byte	56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71
	byte	73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90
	byte	91, 93, 94, 95, 97, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 111
	byte	113, 114, 116, 117, 119, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 135
	byte	137, 138, 140, 141, 143, 145, 146, 148, 149, 151, 153, 154, 156, 158, 159, 161
	byte	163, 165, 166, 168, 170, 172, 173, 175, 177, 179, 181, 182, 184, 186, 188, 190
	byte	192, 194, 196, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221
	byte	223, 225, 227, 229, 231, 234, 236, 238, 240, 242, 244, 246, 248, 251, 253, 255

gammaGreen
        ' 256-step brightness table: gamma = 2.0
        byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1
        byte	1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4
        byte	4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9
        byte	9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16
        byte	16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24
        byte	25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35
        byte	36, 37, 38, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48
        byte	49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63
        byte	64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80
        byte	81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99
        byte	100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120
        byte	121, 123, 124, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143
        byte	145, 146, 148, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 168
        byte	170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195
        byte	197, 199, 200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224
        byte	226, 228, 230, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255
gammaBlue
        ' 256-step brightness table: gamma = 2.0
        byte	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1
        byte	1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4
        byte	4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9
        byte	9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16
        byte	16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24
        byte	25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35
        byte	36, 37, 38, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48
        byte	49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 61, 62, 63
        byte	64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80
        byte	81, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99
        byte	100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120
        byte	121, 123, 124, 126, 127, 128, 130, 131, 133, 134, 136, 137, 139, 140, 142, 143
        byte	145, 146, 148, 149, 151, 152, 154, 155, 157, 158, 160, 162, 163, 165, 166, 168
        byte	170, 171, 173, 175, 176, 178, 180, 181, 183, 185, 186, 188, 190, 192, 193, 195
        byte	197, 199, 200, 202, 204, 206, 207, 209, 211, 213, 215, 217, 218, 220, 222, 224
        byte	226, 228, 230, 232, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255
{
gamma_1_8
        ' 256-step brightness table: gamma = 1.8
        byte	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2
        byte	2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6
        byte	6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12
        byte	13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 21
        byte	21, 22, 22, 23, 24, 24, 25, 26, 26, 27, 28, 28, 29, 30, 30, 31
        byte	32, 32, 33, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41, 41, 42, 43
        byte	44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 53, 54, 55, 56, 57
        byte	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73
        byte	74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90
        byte	91, 92, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109
        byte	110, 111, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 127, 128, 129
        byte	131, 132, 134, 135, 136, 138, 139, 140, 142, 143, 145, 146, 147, 149, 150, 152
        byte	153, 154, 156, 157, 159, 160, 162, 163, 165, 166, 168, 169, 171, 172, 174, 175
        byte	177, 178, 180, 181, 183, 184, 186, 188, 189, 191, 192, 194, 195, 197, 199, 200
        byte	202, 204, 205, 207, 208, 210, 212, 213, 215, 217, 218, 220, 222, 224, 225, 227
        byte	229, 230, 232, 234, 236, 237, 239, 241, 243, 244, 246, 248, 250, 251, 253, 255
gamma_2_3
        ' 256-step brightness table: gamma = 2.3
        byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        byte 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2
        byte 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5
        byte 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10
        byte 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17
        byte 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 24, 25, 26, 26
        byte 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38
        byte 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51
        byte 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67
        byte 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86
        byte 87, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107
        byte 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 130, 131
        byte 133, 134, 136, 138, 139, 141, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158
        byte 160, 161, 163, 165, 167, 169, 170, 172, 174, 176, 178, 180, 182, 183, 185, 187
        byte 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 218, 220
        byte 222, 224, 226, 228, 230, 233, 235, 237, 239, 241, 244, 246, 248, 250, 253, 255
'}

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
