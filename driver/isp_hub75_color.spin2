'' =================================================================================================
''
''   File....... isp_hub75_color.spin2
''   Purpose.... Provide utility color routines
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020 
''   Updated.... 24 Oct 2020
''
'' =================================================================================================

CON { test colorset }
  
    cBlack = $000000
    cWhite = $FFFFFF
    cRed = $FF0000
    cLime = $00FF00
    cBlue = $0000FF
    cYellow = $FFFF00
    cCyan = $00FFFF
    cMagenta = $FF00FF
    cSilver = $C0C0C0
    cGray = $808080
    cMaroon = $800000
    cOlive = $808000
    cGreen = $008000
    cPurple = $800080
    cTeal = $08080
    cNavy = $000080
    cDarkGreen = $006400
    cOrange = $FFA500
    cRedWhtBlu = $deadf0
    cRainbow = $deadf1
    cBlueViolet = $8A2BE2

PUB null()      '' This is not a top level object



PUB setBrightness(newBrightness)
    '' Set the global brightness value
    defaultBrightness := newBrightness

PUB getBrightness() : brightness
    '' Return the global brightness value
    brightness := defaultBrightness

PUB correctedColor(color) : adjustedColor
    adjustedColor := ((color * defaultBrightness) >> 8) & $ff
    adjustedColor := byte[@gamma][adjustedColor]

PUB rgbColorFromDegrees(degrees) : rcbColor | offset60, fract60, red, green, blue
    '' CONVERT: 0-355 degrees to color
    degrees := degrees // 360   ' ensure 0-359
    red := green := blue:= 0
    offset60 := degrees // 60   ' 0-59
    fract60 := 255 * 100 / 60
    if degrees >= 300
        red := 255
        blue := ((59 - offset60) * fract60) / 100
    elseif degrees >= 240
        blue := 255
        red := (offset60 * fract60) / 100
    elseif degrees >= 180
        blue := 255
        green := ((59 - offset60) * fract60) / 100
    elseif degrees >= 120
        green := 255
        blue := (offset60 * fract60) / 100
    elseif degrees >= 60
        green := 255
        red := ((59 - offset60) * fract60) / 100
    else 
        red := 255
        green := (offset60 * fract60) / 100
    {
    fract60 := 4.25 ' float(255 / 60)  ' 4.25             ' 255 / 60
    if degrees >= 300
        red := 255
        blue := (59 - offset60) * fract60
    elseif degrees >= 240
        blue := 255
        red := offset60 * fract60
    elseif degrees >= 180
        blue := 255
        green := (59 - offset60) * fract60
    elseif degrees >= 120
        green := 255
        blue := offset60 * fract60
    elseif degrees >= 60
        green := 255
        red := (59 - offset60) * fract60
    else 
        red := 255
        green := offset60 * fract60
    }
    rcbColor := cValueForRGB(red, green, blue)
    'debug("- degrees=", udec_(degrees), ", color=", uhex_long_(rcbColor), " RGB=", udec_(red), ", ", udec_(green), ", ", udec_(blue), ")" )


PUB rgbForCValue(combinedValue) : red, green, blue
    '' CONVERT: combined color value to r,g,b
    red := (combinedValue & $ff0000) >> 16
    green := (combinedValue & $ff00) >> 8
    blue := (combinedValue & $ff)

PUB cValueForRGB(red, green, blue) : combinedValue
    '' CONVERT: r,g,b to combined value
    combinedValue := ((red & $ff) << 16) | ((green & $ff) << 8) | (blue & $ff)

DAT { tables, default values }

defaultBrightness   word    205      ' 205 = 80%  [0-255,256]   where 256 is NO brightness adjustment

' Gamma curve (lookup table)
gamma   byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        byte 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5
        byte 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14
        byte 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25
        byte 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40
        byte 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 59, 60
        byte 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84
        byte 85, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 108, 109, 111
        byte 112, 114, 115, 117, 119, 120, 122, 123, 125, 127, 128, 130, 132, 133, 135, 137, 138
        byte 140, 142, 144, 145, 147, 149, 151, 153, 155, 156, 158, 160, 162, 164, 166, 168, 170
        byte 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 197, 199, 201, 203, 205
        byte 207, 210, 212, 214, 216, 219, 221, 223, 226, 228, 230, 233, 235, 237, 240, 242, 245
        byte 247, 250, 252, 255
 

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}

