'' =================================================================================================
''
''   File....... isp_hub75_demo.spin2
''   Purpose.... Top-level Demonstration - showing off our HUB75 matrix
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 17 Oct 2020
''
'' =================================================================================================


CON { timing }

  CLK_FREQ = 335_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { DEBUG PINs }

'DEBUG_PIN = 16

VAR

    long    cog

OBJ

    screen      : "isp_hub75_text"
    digit[4]    : "isp_hub75_7seg"

PUB start() : ok | blockX, blockY, subrow, subcol, row, col, red, green, blue, digitIndex   
    '' start underlying drivers and run demo
    ok := cog := screen.start()   ' send buffer to driver
    if ok == -1
        debug("- DEMO: underlying drivers failed!")
        abort

    ' do DEMO Things!

    ' clear screen
    'screen.clearScreen()

        ' draw some text!
    screen.setTextSize(screen.TEXT_SIZE__5x7)    ' font size 
    screen.setCursor(0, 0)   ' start at top left, with one pixel of spacing

    screen.setColoredTextAtRC(0,0, string("iron sheep"), screen.cMaroon)
    screen.setColoredTextAtRC(1,0, string("-RGB 3bit-"), screen.cOrange)
    screen.setColoredTextAtRC(2,0, string("24b color!"), screen.cRainbow)
    screen.setColoredTextAtRC(3,0, string("led matrix"), screen.cWhite)
 
 {
    ' print each letter with a rainbow color
    screen.setCharWithColor("6", screen.cRed)
    screen.setCharWithColor("4", screen.cYellow)
    screen.setCharWithColor("x", screen.cOlive)
    screen.setCharWithColor("3", screen.cGreen)
    screen.setCharWithColor("2", screen.cLime)
}

    repeat digitIndex from 0 to 3
        digit[digitIndex].setScreen(screen.getScreenSetup())

    digit[digitIndex].placeDigit(16, 10, 8, screen.cOrange)

{
    screen.setTextSize(screen.TEXT_SIZE__8x8)    ' font size 
    screen.setCursor(2, 0)   ' start at top left, with one pixel of spacing
 
    ' print each letter with a rainbow color
    screen.setCharWithColor("6", screen.cRed)
    screen.setCharWithColor("4", screen.cYellow)
    screen.setCharWithColor("x", screen.cOlive)
    screen.setCharWithColor("3", screen.cGreen)
    screen.setCharWithColor("2", screen.cLime)
}

    screen.commitScreenToPanel()
    'repeat ' HOLD did clear work?

{' --------------------------------------
    ' do color blast
    debug("- DEMO: draw colored pixels")
    repeat blockX from 0 to 3
        repeat blockY from 0 to 1
            repeat subrow from 0 to 15
                repeat subcol from 0 to 15
                    row := (blockY * 16) + subrow
                    col := (blockX * 16) + subcol
                    red := subrow * (255 / 16)
                    green := subcol * (255 / 16)
                    blue := ((blockY * 4) + blockX) * (255 / 8)
                    screen.drawPixelAtRCwithRGB(row, col, red, green, blue)

    screen.commitScreenToPanel()
' --------------------------------------
}
{' --------------------------------------
    ' do corners
    screen.drawPixelAtRCwithRGB(0, 0, 255, 0, 0)
    screen.drawPixelAtRCwithRGB(0, 1, 255, 0, 0)
    screen.drawPixelAtRCwithRGB(31, 0, 0, 0, 255)
    screen.drawPixelAtRCwithRGB(31, 1, 0, 0, 255)
    screen.drawPixelAtRCwithRGB(31, 2, 0, 0, 255)
    screen.drawPixelAtRCwithRGB(0, 63, 0, 255, 0)
    screen.drawPixelAtRCwithRGB(01, 63, 0, 255, 0)
    screen.drawPixelAtRCwithRGB(30, 62, 0, 255, 30)
    screen.drawPixelAtRCwithRGB(31, 62, 0, 255, 30)
    screen.drawPixelAtRCwithRGB(30, 63, 0, 255, 30)
    screen.drawPixelAtRCwithRGB(31, 63, 0, 255, 30)
    screen.commitScreenToPanel()
' --------------------------------------}

    debug("DEMO: done")
    repeat

PUB stop()                  '' stop the driver
  if cog
    screen.stop()
    cog := 0

CON { license }

{{

  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}

