'' =================================================================================================
''
''   File....... isp_hub75_panel.spin2
''   Purpose.... Manage the HUB75 panel content
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 5 Nov 2022
''
''  This object provides 24bit screen buffer to PWM buffers support
'' =================================================================================================


CON { I/O PINs }

' None

OBJ { Objects Needed }

    hub75Bffrs  :   "isp_hub75_hwBufferAccess"
    matrix      :   "isp_hub75_rgb3bit"

VAR { driver instance variables }
    LONG    instanceID
    LONG    cog
    LONG    bus           ' ram/flash
    LONG    chainIndex
    LONG    nDumpPassNbr
    LONG    nPwmFrameSizeInLongs
    BYTE    usePwmFrameset1
    BYTE    bDumpOnce
    BYTE    nPassCt

    LONG    pPwmFrame1
    LONG    pPwmFrame2

    LONG    intrvlStart
    LONG    intrvlStop


' ----------------------------------------------------------

PUB null()
'' This is not a top level object

PUB start(nID, nChainIdx) : ok
    '' Start the backend pasm2 driver for the matrix
    chainIndex := nChainIdx
    instanceID := nID
    pPwmFrame1 := hub75Bffrs.pwmFrame1BufferAddress(chainIndex)
    pPwmFrame2 := hub75Bffrs.pwmFrame2BufferAddress(chainIndex)

    debug("- PNL: #", udec_(instanceID), " Start clk=", udec_long(clkfreq))

    bDumpOnce := FALSE
    nPassCt := 0

    nPwmFrameSizeInLongs := hub75Bffrs.pwmFrameSizeInLongs(chainIndex)
    debug("- PNL: PHYScols=", udec_long_(hub75Bffrs.maxDisplayColumns(chainIndex)), " PHYSrows=", udec_long_(hub75Bffrs.maxDisplayRows(chainIndex)))
    debug("- PNL: maxPwmBuffers=", udec_long_(hub75Bffrs.colorDepth(chainIndex)), " PwmBufferSizeInLongs=", udec_long_(nPwmFrameSizeInLongs))
    debug("- PNL: BFFR pwm[1][", udec_long_(nPwmFrameSizeInLongs), "] 0x", uhex_long_(pPwmFrame1))
    debug("- PNL: BFFR pwm[2][", udec_long_(nPwmFrameSizeInLongs), "] 0x", uhex_long_(pPwmFrame2))

    usePwmFrameset1 := TRUE
    nDumpPassNbr := 0

    clearPwmFrameBuffer()  ' clear PWM frames  and get pointer to buffer
    clearPwmFrameBuffer()  ' this clears 2nd frame-set, too

    ok := cog := matrix.start(instanceID, chainIndex)   ' send buffer to driver
    if ok == -1
        debug("- PNL: underlying drivers failed!")
        abort

    waitms(1)   ' allow cog-start debug messages to finish...

PUB stop()
    '' Stop the pasm2 backend driver
    if cog
        matrix.stop()
        cog := 0

PUB fillScreenNoPWM(threeBitColor)
    '' Fill screen but without PWM (for testing underlying driver)
    matrix.fillScreenNoPWM(threeBitColor)

PUB convertScreen2PWM_14(p24bitScreen, bSwapRB, bSwapGB) | pPwmFrameSet, pPwmFrame, lOne4thLineCt, lOneHalfLineCt, lThree4thsLineCt, lMmaskModHalfScreen, lPhyRows, lPysColumns, lDisplayBytesPerColor, lMaxPwmBuffers, lPwmFrameSizeInBytes
' NOTE: 16 longs total avail to inline pasm: params + return + local
'  --> 14/16 used

    '' Load a 24-bit-color image into PWM frame buffers at 8s (4 scan-lines at a time) [PASM]
    ' scan memory, write PWM bytes twice, sigh...
    'debug("- PNL:cs2pwm(): scn ", uhex_long(p24bitScreen), uhex_long(bSwapRB), uhex_long(bSwapGB))

    ' -------------------------------------------------------------------------
    ' NOTES for panel P4-1921-8S-V2.0 - 1/8 scan
    '  two full 64px lines are emmitted for wach row, or 128px per each of 8 rows
    '  the top 16 rows are fed by RGB1, while the bottom 16 rows are fed by RGB2
    '
    '  64px lines do NOT span multiple rows! This means we can do a simple row-
    '  number translation when mapping our PWM buffers to how the panel will display
    '  the pixel values.
    '
    '  The mapping is as follows:
    '    ----- TOP ------                    ----- BOTTOM -----
    '  Row 0 is placed in PWM bffr Row 1    Row 16 into pwm Row 17
    '     ------------                          ------------
    '      0   ->   1                           16   ->   17
    '      1   ->   3                           17   ->   19
    '      2   ->   5                           18   ->   21
    '      3   ->   7                           19   ->   23
    '      4   ->   9                           20   ->   25
    '      5   ->  11                           21   ->   27
    '      6   ->  13                           22   ->   29
    '      7   ->  15                           23   ->   31
    '     ------------                          ------------
    '      8   ->   0                           24   ->   16
    '      9   ->   2                           25   ->   18
    '     10   ->   4                           26   ->   20
    '     11   ->   6                           27   ->   22
    '     12   ->   8                           28   ->   24
    '     13   ->  10                           29   ->   26
    '     14   ->  12                           30   ->   28
    '     15   ->  14                           31   ->   30
    ' -------------------------------------------------------------------------
    ' this routine does not prestore all the transformed bytes
    '  instead it scans each pixel at RC of the screen size
    '  it then places either RGB1 into the each pwm frames' buffer
    '   or if we are addressing the BOTTOM then it reads RGB1 value
    '   from the pwm frames' buffer and or's in the RGB2 values
    '
    '  THIS means that each screen buffer BYTE is read once while each
    '    PWM buffer BYTE is written twice.
    '  Anyway, the math to calculate the target pixel BYTE in the pwm buffer
    '   is:
    ' -------------------------------------------------------------------------
    '  The targetRow math of:
    '    rows  0 -  7: targetRow = (row * 2) + 1
    '    rows  8 - 15: targetRow = (row - 8) * 2
    '    rows 16 - 24: targetRow = ((row - 16) * 2) + 17
    '    rows 24 - 31: targetRow = (row - 24) * 2) + 16
    ' -------------------------------------------------------------------------

    markStart()
    ' init ptrs/variables
    pPwmFrameSet            := getActivePwmBuffer()
    lPhyRows                := hub75Bffrs.maxDisplayRows(chainIndex)
    lPysColumns             := hub75Bffrs.maxDisplayColumns(chainIndex)
    lOne4thLineCt           := lPhyRows / 4
    lOneHalfLineCt          := lPhyRows / 2
    lThree4thsLineCt        := (lPhyRows / 4) * 3
    lMmaskModHalfScreen     := ((lPhyRows * lPysColumns) / 2) - 1
    lDisplayBytesPerColor   := hub75Bffrs.bytesPerColor(chainIndex)
    lMaxPwmBuffers          := hub75Bffrs.colorDepth(chainIndex)
    lPwmFrameSizeInBytes    := hub75Bffrs.pwmFrameSizeInBytes(chainIndex)

                    org
                    jmp     #startS8


' the following initialized values are simply copied into PASM area before routine is run
nPhysLineIdx        LONG    0
nPhysLineCtr        LONG    0
nColumnCtr          LONG    0
nTargLineIdx        LONG    0
nPwmRGB12ByteIdx    LONG    0
bIsBottomHalf       LONG    0
nRGBColorOfst       LONG    0
maskQtrRowsModulus  LONG    0
pRGBPixAddr         LONG    0
redBitRGB1Value     LONG    $01
greenBitRGB1Value   LONG    $02
blueBitRGB1Value    LONG    $04
redBitRGB2Value     LONG    $08
greenBitRGB2Value   LONG    $10
blueBitRGB2Value    LONG    $20
maskOnlyRGB1bits    LONG    $07
maskOnlyRGB2bits    LONG    $38
maskRGB1nRGB2bits   LONG    $3F
redPwmBits          LONG    0
greenPwmBits        LONG    0
bluePwmBits         LONG    0
colorValue24bit     LONG    0
pwmBitCtr           LONG    0
currPwmBffrIdx      LONG    0
currMaskBitIdx      LONG    0
bitsBGR             LONG    0
pPwmFrameByte       LONG    0
currPwmBits         LONG    0
testBGR             LONG    0
allOnes             LONG    $ffffffff


startS8
                    ' init variables
                    mov     redBitRGB1Value, #$01
                    mov     greenBitRGB1Value, #$02
                    mov     blueBitRGB1Value, #$04
                    mov     redBitRGB2Value, #$08
                    mov     greenBitRGB2Value, #$10
                    mov     blueBitRGB2Value, #$20
                    ' setup for red/blue flip if needed
                    or      bSwapRB, bSwapRB   wz   ' T/F where: T=nz, F=z
                    ' T/nz = is Swapped
    if_nz           mov     redBitRGB1Value, #$04       ' red1 gets blue
    if_nz           mov     blueBitRGB1Value, #$01      ' blue1 gets red
    if_nz           mov     redBitRGB2Value, #$20       ' red2 gets blue
    if_nz           mov     blueBitRGB2Value, #$08      ' blue2 gets red
                    ' setup for blue/green flip if needed
                    or      bSwapGB, bSwapGB   wz   ' T/F where: T=nz, F=z
                    ' T/nz = is Swapped
    if_nz           mov     greenBitRGB1Value, #$04     ' green1 gets blue
    if_nz           mov     blueBitRGB1Value, #$02      ' blue1 gets green
    if_nz           mov     greenBitRGB2Value, #$20     ' green2 gets blue
    if_nz           mov     blueBitRGB2Value, #$10      ' blue2 gets green
for8SScreen
            ' for all pixels of the screen buffer
                'repeat nPhysLineIdx from 0 to screen.MAX_PHYSICAL_ROWS - 1             ' [0-31]
                    xor     nPhysLineIdx, nPhysLineIdx
                    mov     nPhysLineCtr, lPhyRows
next8SLine
                ' calc nPwmRGB12ByteIdx: offset into PWM buffer
                    mov     nTargLineIdx, nPhysLineIdx      ' start with phys row number
                    '  if low-half rows of panelSet...
                    cmp     nPhysLineIdx, lOneHalfLineCt     wc
    if_nc           jmp     #bottom8SRows
top8SRows           ' determine calcs to use for top half of panel - Rows [0-15]
                    ' if nPhysLineIdx < lOne4thLineCt...
                    cmp     nPhysLineIdx, lOne4thLineCt      wc
                    ' CY=1: nTargLineIdx := (nPhysLineIdx * 2) + 1 - rows  [0-7]
    if_c            shl     nTargLineIdx, #1                    ' mult by 2
    if_c            add     nTargLineIdx, #1                    ' add 1
                    ' CY=0: nTargLineIdx := (nPhysLineIdx - lOne4thLineCt) * 2 - Rows [8-15]
    if_nc           sub     nTargLineIdx, lOne4thLineCt                    ' subtract 8
    if_nc           shl     nTargLineIdx, #1                    ' mult by 2
                    jmp     #targ8SCalcsDone
bottom8SRows        ' determine calcs to use for bottom half of panel - Rows [16-31]
                    ' if nPhysLineIdx < lThree4thsLineCt
                    cmp     nPhysLineIdx, lThree4thsLineCt      wc
                    ' CY=1: nTargLineIdx := ((nPhysLineIdx - lOneHalfLineCt) * 2) + lOneHalfLineCt + 1 - Rows [16-23]
    if_c            sub     nTargLineIdx, lOneHalfLineCt         ' minus lOneHalfLineCt
    if_c            shl     nTargLineIdx, #1                    ' mult by 2
    if_c            add     nTargLineIdx, lOneHalfLineCt         ' add lOneHalfLineCt
    if_c            add     nTargLineIdx, #1                    ' add 1
                    ' CY=0: nTargLineIdx := ((nPhysLineIdx - lThree4thsLineCt) + lOneHalfLineCt) * 2 - Rows  [24-31]
    if_nc           sub     nTargLineIdx, lThree4thsLineCt       ' minus lThree4thsLineCt
    if_nc           shl     nTargLineIdx, #1                    ' mult by 2
    if_nc           add     nTargLineIdx, lOneHalfLineCt         ' add lOneHalfLineCt
targ8SCalcsDone
                    ' bIsBottomHalf := (nTargLineIdx > lOneHalfLineCt - 1) ? TRUE : FALSE
                    cmp     nTargLineIdx, lOneHalfLineCt    wc
    if_nc           mov     bIsBottomHalf, allOnes              ' TRUE if row 16-31
    if_c            xor     bIsBottomHalf, bIsBottomHalf        ' FALSE if row 0-15
                'repeat nColumnIdx from 0 to screen.MAX_PHYSICAL_COLUMNS - 1       ' [0-63]
                    mov     nColumnCtr, lPysColumns
                    ' calc nRGBColorOfst: offset into screen buffer
                    'nRGBColorOfst := (nPhysLineIdx * screen.MAX_PHYSICAL_COLUMNS) * screen.DISPLAY_BYTES_PER_COLOR
                    mov     nRGBColorOfst, nPhysLineIdx
                    mul     nRGBColorOfst, lPysColumns
                    mul     nRGBColorOfst, lDisplayBytesPerColor
                    ' pRGBPixAddr := @BYTE[p24bitScreen][nRGBColorOfst]    ' add in offset to 24-bit color
                    mov     pRGBPixAddr, p24bitScreen
                    add     pRGBPixAddr, nRGBColorOfst
                    ' nPwmRGB12ByteIdx := (nTargLineIdx * screen.MAX_PHYSICAL_COLUMNS)
                    mov     nPwmRGB12ByteIdx, nTargLineIdx
                    mul     nPwmRGB12ByteIdx, lPysColumns
next8SColumn
                ' locate and load color for scanline
                    rdlong  colorValue24bit, pRGBPixAddr
                    ' red := BYTE[pRGBPixAddr][0]
                    getbyte redPwmBits, colorValue24bit,#0
                    ' green := BYTE[pRGBPixAddr][1]
                    getbyte greenPwmBits, colorValue24bit,#1
                    ' blue := BYTE[pRGBPixAddr][2]
                    getbyte bluePwmBits, colorValue24bit,#2

                    ' write color information to our PWM buffers
                    ' expand PWM-Bit-width bits into N pwm frames of 3-bit pixels two pixels/BYTE

                    ' for ea. bit do...
                    ' repeat currPwmBffrIdx from 0 to screen.MAX_PWM_BUFFERS - 1 (there's PWM_BUFFER for ea. bit in color depth)
                    xor     currPwmBffrIdx, currPwmBffrIdx          ' start with buffer[0] of [0-MAX_PWM_BUFFERS - 1]
                    ' NOTE: PWM def'n bits are org'd at MSBit and are COLOR_DEPTH in width (3-8 bits depth)
                    mov     currMaskBitIdx, #7                      ' start bitmask is always msBit of BYTE
                    mov     pwmBitCtr, lMaxPwmBuffers      ' MAX PWM FRAME bits to scan in LONG

next8SPwmFrame
                    ' calculate pointer to frame for this bit #
                    '   nFrameOffset := frameIdx * nPwmFrameSizeInLongs ' 256 longs in each frame
                    '   pPwmFrame := @LONG[getActivePwmBuffer()][nFrameOffset]
                    mov     pPwmFrame, currPwmBffrIdx
                    mul     pPwmFrame, lPwmFrameSizeInBytes
                    add     pPwmFrame, pPwmFrameSet
                    ' calc address of BYTE in pwm frame for this nPwmRGB12ByteIdx
                    mov     pPwmFrameByte, nPwmRGB12ByteIdx                ' get base addr
                    and     pPwmFrameByte, lMmaskModHalfScreen               ' mod ((pys rows * phys cols) / 2)
                    add     pPwmFrameByte, pPwmFrame         ' add offset
                    ' build top RGB1 or bottom RGB2 bits to be stored in pwm BYTE
                    ' if not bIsBottomHalf
                    or      bIsBottomHalf, bIsBottomHalf     wz     ' T/F where: T=nz, F=z
    if_nz           jmp     #bottom8SHalf
top8SHalf
                    ' bitsBGR := 0
                    xor     bitsBGR, bitsBGR            ' clear all bits
                    mov     testBGR, bitsBGR
                    ' set our RGB1 bits
                    '     bitsBGR |= (rPwm & currBitMask) > 0 ? 1 : 0
                    '     bitsBGR |= (gPwm & currBitMask) > 0 ? 2 : 0
                    '     bitsBGR |= (bPwm & currBitMask) > 0 ? 4 : 0
                    testb   redPwmBits, currMaskBitIdx     wc
    if_c            or      bitsBGR, redBitRGB1Value
                    testb   greenPwmBits, currMaskBitIdx   wc
    if_c            or      bitsBGR, greenBitRGB1Value
                    testb   bluePwmBits, currMaskBitIdx    wc
    if_c            or      bitsBGR, blueBitRGB1Value
                    jmp     #write8SPwmByte
bottom8SHalf
                '    bitsBGR := BYTE[pPwmFrame][nPwmRGB12ByteIdx]
                    rdbyte  bitsBGR, pPwmFrameByte       ' load current value
                    mov     testBGR, bitsBGR
                    ' NOTE: see if there's a write w/mask so we don't have to read...
' not needed        and     bitsBGR, maskOnlyRGB1bits   ' clear all bits except RGB1 value
                    ' set our RGB2 bits
                    '    bitsBGR |= (rPwm & currBitMask) > 0 ? 8 : 0
                    '    bitsBGR |= (gPwm & currBitMask) > 0 ? $10 : 0
                    '    bitsBGR |= (bPwm & currBitMask) > 0 ? $20 : 0
                    testb   redPwmBits, currMaskBitIdx     wc
    if_c            or      bitsBGR, redBitRGB2Value
                    testb   greenPwmBits, currMaskBitIdx   wc
    if_c            or      bitsBGR, greenBitRGB2Value
                    testb   bluePwmBits, currMaskBitIdx    wc
    if_c            or      bitsBGR, blueBitRGB2Value
write8SPwmByte
                ' write RGB1, RGB2 value to BYTE
                'BYTE[pPwmFrame][nPwmRGB12ByteIdx] := bitsBGR
                    'or      bitsBGR, #$3F
                    wrbyte  bitsBGR, pPwmFrameByte       ' load current value
                    ' this one done, if not all 8 bits done, go do next
                    add     currPwmBffrIdx, #1
                    sub     currMaskBitIdx, #1
                    djnz    pwmBitCtr, #next8SPwmFrame

                    ' count this column, go do next column if not yet done
                    add     pRGBPixAddr, lDisplayBytesPerColor
                    add     nPwmRGB12ByteIdx, #1
                    djnz    nColumnCtr, #next8SColumn
                    ' count this row, go do next row if not yet done
                    add     nPhysLineIdx, #1
                    djnz    nPhysLineCtr, #next8SLine
doneS8
                    end

    markEnd(string("pasm 8S"))
    matrix.writePwmBuffer(pPwmFrameSet)

' -----------------------------------------------------------------------------

PUB convertScreen2PWM(p24bitScreen, bSwapRB, bSwapGB) | pPwmFrameSet, lPhyRows, lPysColumns, lDisplayBytesPerColor, lPwmFrameSizeInBytes, lMaxPwmBuffers, lPixelCtr, l24bitColorTop, l24bitColorBot
' NOTE: 16 longs total avail to inline pasm: params + return + local
'  --> 12/16 used
    '' Load a 24-bit image into PWM frame buffers at 16s, 32s (2 scan-lines at a time) [SPIN]
    ' XYZZYpnl debug("- PNL: loading screen at @", uhex_long_(p24bitScreen), uhex_long(bSwapRB), uhex_long(bSwapGB))
    ' FACT: dual 64x64 panel yields 205.035 Hz (full PWM fps)
    ' save address of 24bit screen for use by called routines
    markStart()

    pScreenInMemory := p24bitScreen
  ' clear 8x 3-bit frames
    pPwmFrameSet            := getActivePwmBuffer()  ' clear PWM frames  and get pointer to buffer
    lPhyRows                := hub75Bffrs.maxDisplayRows(chainIndex)
    lPysColumns             := hub75Bffrs.maxDisplayColumns(chainIndex)
    lPwmFrameSizeInBytes    := hub75Bffrs.pwmFrameSizeInBytes(chainIndex)
    lMaxPwmBuffers          := hub75Bffrs.colorDepth(chainIndex)
    lDisplayBytesPerColor   := hub75Bffrs.bytesPerColor(chainIndex)
    lPixelCtr               := (lPhyRows * lPysColumns) / 2
    l24bitColorTop          := (((lPhyRows * lPysColumns) / 2) - 1) * lDisplayBytesPerColor
    l24bitColorBot          := ((lPhyRows * lPysColumns) / 2) * lDisplayBytesPerColor

   ' fill PWM_FRAMES from 24-bit-screen
                    org
                    jmp     #start16s

' the following initialized values are simply copied into PASM area before routine is run
redBitTopValue      LONG    $01
greenBitTopValue    LONG    $02
blueBitTopValue     LONG    $04
redBitBotValue      LONG    $08
greenBitBotValue    LONG    $10
blueBitBotValue     LONG    $20
midDisplayRow       LONG    0
redPwmBitsTop       LONG    0
greenPwmBitsTop     LONG    0
bluePwmBitsTop      LONG    0
redPwmBitsBot       LONG    0
greenPwmBitsBot     LONG    0
bluePwmBitsBot      LONG    0
pPwmFrameByt        LONG    0
p24bitColorTop      LONG    0
p24bitColorBot      LONG    0
colorValue24bit     LONG    0
colorValueTop       LONG    0
colorValueBot       LONG    0
colorMask           LONG    0
bitCount            LONG    0
currMaskBitIdx      LONG    0
currPwmBffrIdx      LONG    0
panelBGR            LONG    0
rowIndexHalfPanel   LONG    0
pwmByteIndex        LONG    0
currPwmColorBits    LONG    0
currPwmBits         LONG    0
tempByte            LONG    0
allOnes             LONG    $ffffffff

start16s
                    ' for each pixels in half screen
                    mov     p24bitColorTop, l24bitColorTop
                    mov     p24bitColorBot, l24bitColorBot
                    add     p24bitColorTop, p24bitScreen                        ' convert to address of last pixel in top half
                    add     p24bitColorBot, p24bitColorTop                      ' convert to address of last pixel in bottom half
                    ' init variables
                    mov     redBitTopValue, #$01
                    mov     greenBitTopValue, #$02
                    mov     blueBitTopValue, #$04
                    mov     redBitBotValue, #$08
                    mov     greenBitBotValue, #$10
                    mov     blueBitBotValue, #$20
                    ' setup for red/blue flip if needed
                    or      bSwapRB, bSwapRB   wz       ' T/F where: T=nz, F=z
    if_nz           mov     redBitTopValue, #$04        ' redT gets blue
    if_nz           mov     blueBitTopValue, #$01       ' blueT gets red
    if_nz           mov     redBitBotValue, #$20        ' redB gets blue
    if_nz           mov     blueBitBotValue, #$08       ' blueB gets red
                    ' alternatively, setup for green/blue flip if needed
                    or      bSwapGB, bSwapGB   wz   ' T/F where: T=nz, F=z
    if_nz           mov     greenBitTopValue, #$04      ' greenT gets blue
    if_nz           mov     blueBitTopValue, #$02      ' blueT gets green
    if_nz           mov     greenBitBotValue, #$20      ' greenB gets blue
    if_nz           mov     blueBitBotValue, #$10       ' blueB gets green
nextPixel
                    ' load our 2 pixels color/pwm data (top and bottom half of panel)
                    rdlong  colorValue24bit, p24bitColorTop
                    ' red := BYTE[p24bitScreen][p24bitColor][0]
                    getbyte redPwmBitsTop, colorValue24bit,#0
                    ' green := BYTE[p24bitScreen][p24bitColor][1]
                    getbyte greenPwmBitsTop, colorValue24bit,#1
                    ' blue := BYTE[p24bitScreen][p24bitColor][2]
                    getbyte bluePwmBitsTop, colorValue24bit,#2

                    rdlong  colorValue24bit, p24bitColorBot
                    ' red := BYTE[p24bitScreen][p24bitColor][0]
                    getbyte redPwmBitsBot, colorValue24bit,#0
                    ' green := BYTE[p24bitScreen][p24bitColor][1]
                    getbyte greenPwmBitsBot, colorValue24bit,#1
                    ' blue := BYTE[p24bitScreen][p24bitColor][2]
                    getbyte bluePwmBitsBot, colorValue24bit,#2

                    ' FYI GAMMA correction, brightness are adjusted as the BYTE is placed into our source screen buffer!!

                    ' write color information to our PWM buffers
                    ' expand 24-bit pixel into N pwm frames of 3-bit pixel
                    ' for ea. bit do...
                    xor     currPwmBffrIdx, currPwmBffrIdx          ' start with buffer[0] of [0-MAX_PWM_BUFFERS - 1]
                    mov     bitCount, lMaxPwmBuffers       ' MAX PWM FRAME bits to scan in LONG
                    ' NOTE: PWM def'n bits are org'd at MSBit and are COLOR_DEPTH in width (3-8 bits depth)
                    '  3=$E0, 4=$F0, 5=$F8, 6=$FC, 7=$FE, 8=$FF
                    mov     currMaskBitIdx, #7                      ' start bitmask is always msBit of BYTE
nextBit
                    ' calculate offset to frame for this bit #
                    '   frameIdx := 0 #> nBitNumber <# screen.MAX_PWM_BUFFERS - 1    ' MAX N pwm frames so limit our index
                    '   nFrameOffset := frameIdx * nPwmFrameSizeInLongs ' 256 longs in each frame
                    '   pPwmFrameByt := @LONG[getActivePwmBuffer()][nFrameOffset]
                    mov     pPwmFrameByt, currPwmBffrIdx
                    mul     pPwmFrameByt, lPwmFrameSizeInBytes
                    ' calculate pointer to frame for this bit #
                    add     pPwmFrameByt, pPwmFrameSet     ' add base of frame buffer
                    add     pPwmFrameByt, lPixelCtr        ' add-in offset to current BYTE
                    sub     pPwmFrameByt, #1               ' make relative to 0
                    ' build RGB1 and RGB2 bits to be stored in PWM panel BYTE
                    '   rBit := red & (1 << currMaskBitIdx) > 0 ? 1 : 0
                    '   gBit := green & (1 << currMaskBitIdx) > 0 ? 1 : 0
                    '   bBit := blue & (1 << currMaskBitIdx) > 0 ? 1 : 0
                    xor     panelBGR, panelBGR                      ' clear color value
                    testb   redPwmBitsTop, currMaskBitIdx     wc
        if_c        or      panelBGR, redBitTopValue
                    testb   greenPwmBitsTop, currMaskBitIdx   wc
        if_c        or      panelBGR, greenBitTopValue
                    testb   bluePwmBitsTop, currMaskBitIdx    wc
        if_c        or      panelBGR, blueBitTopValue
                    testb   redPwmBitsBot, currMaskBitIdx     wc
        if_c        or      panelBGR, redBitBotValue
                    testb   greenPwmBitsBot, currMaskBitIdx   wc
        if_c        or      panelBGR, greenBitBotValue
                    testb   bluePwmBitsBot, currMaskBitIdx    wc
        if_c        or      panelBGR, blueBitBotValue

                    ' write our new BYTE value
                    '    BYTE[pPwmFrameByt][pwmByteIndex] := panelBGR
                    wrbyte  panelBGR, pPwmFrameByt
                    ' this one done, if not all 8 bits done, go do next
                    add     currPwmBffrIdx, #1
                    sub     currMaskBitIdx, #1
                    djnz    bitCount, #nextBit

                    ' point to prior pixel RGB spec in top and bottom halves
                    sub    p24bitColorTop, lDisplayBytesPerColor
                    sub    p24bitColorBot, lDisplayBytesPerColor
                    ' count this pixel done, go do next pixel if not yet done
                    djnz    lPixelCtr, #nextPixel
done16s
                    end

    markEnd(string("pasm 16S"))
    {
    nPassCt++
    if not bDumpOnce && nPassCt == 5
        bDumpOnce := TRUE
        dumpBufferHeads(pScreenInMemory, pPwmFrameSet)
    '}
    matrix.writePwmBuffer(pPwmFrameSet)

' -----------------------------------------------------------------------------

CON ' ------------- PRIVATE (Utility) Methods -------------

PRI dumpBufferHeads(pSCreenBuffer,pPwmBuffer)
    hub75Bffrs.dbgMemDump(@bufferMsg, pSCreenBuffer, 48)
    hub75Bffrs.dbgMemDump(@frameMsg, pPwmBuffer, 48)

PRI dumpFrameAddrs(pPwmFrameSet) | pFrameBuffer, frameIndex
        repeat frameIndex from 0 to hub75Bffrs.colorDepth(chainIndex) - 1
            pFrameBuffer := @LONG[pPwmFrameSet][frameIndex * nPwmFrameSizeInLongs]
            debug("PNL: PWM", udec_(frameIndex), ": ", uhex_long_(pFrameBuffer))

PRI dumpFrameSet(pPwmFrameSet) | pFrameBuffer, frameIndex
        repeat frameIndex from 0 to hub75Bffrs.colorDepth(chainIndex) - 1
            pFrameBuffer := @LONG[pPwmFrameSet][frameIndex * nPwmFrameSizeInLongs]
            dumpFrame(frameIndex, pFrameBuffer)

PRI dumpFrame(frameIdx, pFrameBuffer) | frameASCII
    frameASCII := frameIdx | $30
    if frameIdx > 9
        frameASCII := frameIdx - 10 + $41
    BYTE[@msgPwm][3] := frameASCII

    if emptyRgb2(pFrameBuffer)
        BYTE[@msgPwm][4] := "*"
    else
        BYTE[@msgPwm][4] := $20 ' space

    hub75Bffrs.dbgMemDump(@msgPwm, pFrameBuffer, 32)

PRI emptyRgb2(pFrameBuffer) : isEmpty | byteIdx
    isEmpty := TRUE
    repeat byteIdx from 0 to 31
        if BYTE[pFrameBuffer][byteIdx] & $38 > 0
            isEmpty := FALSE
            quit

PRI clearPwmFrameBuffer() : pPwmFrameSet
    ' clear entire PWM buffer
    ' implement double buffering by alternating between our two pwm-frame-sets
    usePwmFrameset1 := !usePwmFrameset1
    pPwmFrameSet := getActivePwmBuffer()
    'debug("- active buffer=", uhex_long_(pPwmFrameSet))
    longfill(pPwmFrameSet, 0, nPwmFrameSizeInLongs * hub75Bffrs.colorDepth(chainIndex))

PRI getActivePwmBuffer() : pPwmFrameSet
    pPwmFrameSet := (usePwmFrameset1) ? pPwmFrame1 : pPwmFrame2

PRI getPwmFrameAddressForBit(nBitNumber) : pFrameBuffer | nFrameOfst, frameIdx
    ' return indexed PWM Frame address
    frameIdx := 0 #> nBitNumber <# hub75Bffrs.colorDepth(chainIndex) - 1    ' limit our index to MAX_PWM_BUFFERS
    nFrameOfst := frameIdx * nPwmFrameSizeInLongs ' N longs in each PWM frame
    pFrameBuffer := @LONG[getActivePwmBuffer()][nFrameOfst]
    'debug("- PWM frame(", udec_(frameIdx), "), ", uhex_long(pFrameBuffer))

VAR { buffer addresses }

    LONG    pBitmapFileInMemory
    LONG    dvrConfig
    LONG    driverConfigRaw
    LONG    pScreenInMemory

PRI setPanelColorBitsForRC(pPwmFrame, nPanelRow, nPanelCol, rBit, gBit, bBit) | nBffrR, nBffrC, isRGB2, byteIdx, maskBitsBGR, bitsBGR, currPwmColorBits, showDebug
    '  write color bits to a PWM frame at frame[r][c]    UNUSED FOR NOW
    nBffrR := 0 #> nPanelRow <# hub75Bffrs.maxDisplayRows(chainIndex) - 1
    nBffrC := 0 #> nPanelCol <# hub75Bffrs.maxDisplayColumns(chainIndex) - 1
    isRGB2 := (nBffrR > 15) ? TRUE : FALSE
    nBffrR //= 16

    maskBitsBGR := %0000_0111
    ' NOTE: our hardware uses "00 bgr bgr" for the BYTE value!
    bitsBGR := ((bBit & $01) << 2) | ((gBit & $01) << 1) | (rBit & $01)
    if isRGB2
        bitsBGR <<= 3    ' mov color bits into rgb2 position
        maskBitsBGR <<= 3
    ' FIXME: UNDONE WAS PANEL_COLUMNS ??
    ' FIXME: missing offset to panel and using panel_colums
    byteIdx := (nBffrR * hub75Bffrs.maxDisplayColumns(chainIndex)) + nBffrC

    currPwmColorBits := BYTE[pPwmFrame][byteIdx] & !maskBitsBGR
    if byteIdx > 1023
        debug("ERROR! BYTE index calc failure have=(" , udec_(byteIdx), ") of [0-1023]")
    else
        BYTE[pPwmFrame][byteIdx] := currPwmColorBits | bitsBGR

PRI markStart()
    'pinl(46)    ' for timing
    'pinh(47)    ' for timing
    intrvlStart := getct() ' get starting time

PRI markEnd(message) | elapsed
    intrvlStop := getct() ' get stoping time
    'pinl(47)    ' for timing
    'pinl(46)    ' for timing
    elapsed := intrvlStop - intrvlStart  ' compute elapsed ticks, no need to worry about timer wrap here
    'elapsed := elapsed +/ (clkfreq/1000) ' convert to milliseconds
    elapsed := elapsed +/ (clkfreq/1000000) ' convert to useconds
    'elapsed := elapsed +/ (clkfreq/1000) ' convert to useconds
    debug("- runtime ", zstr_(message), ": ", udec_long(elapsed), " uS")

PRI isDebugLocn(nRow, nCol) : status
    status := FALSE
    return
    if (nRow == 31 && nCol < 4) || (nRow < 2 && nCol < 3) || (nRow == 31 && nCol > 61) || (nRow < 2 && nCol > 61)
        status := TRUE ' FALSE  ' turn off debug

PRI waitSec(countSeconds)
    repeat countSeconds
        waitms(1000)

DAT { .bmp fiile work area }

    testValue       LONG    $87654321
    testValueMsg    BYTE    "Test value",0

    msgScrnHd       BYTE    "Screen",0
    msgPwm          BYTE    "Pwm0 ", 0

    bufferMsg       BYTE    "SCREEN",0
    frameMsg        BYTE    "PWM[0]",0

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================

}}
