'' =================================================================================================
''
''   File....... isp_hub75_display.spin2
''   Purpose.... control text placement on HUB75 RGB Matrix
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2024 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 15 Jan 2024
''
'' =================================================================================================

CON { Object Interface: PUBLIC ENUMs }

  NOT_FOUND = -1

  ' supported Text Fonts

  TEXT_FONT_DEFAULT           = fonts.TEXT_FONT_DEFAULT
  TEXT_FONT_5x7               = fonts.TEXT_FONT_5x7
  TEXT_FONT_5x7_DITH          = fonts.TEXT_FONT_5x7_DITH
  TEXT_FONT_5x7_DITH_DCNDR    = fonts.TEXT_FONT_5x7_DITH_DCNDR
  TEXT_FONT_8x8A              = fonts.TEXT_FONT_8x8A
  TEXT_FONT_8x8B              = fonts.TEXT_FONT_8x8B

  ' scrolling support
  '  enum: scrolling direction (these start from 10 decimal)
  DIR_UNKNOWN     = scroller.DIR_UNKNOWN
  DIR_TO_LEFT     = scroller.DIR_TO_LEFT
  DIR_TO_RIGHT    = scroller.DIR_TO_RIGHT
  DIR_DOWN        = scroller.DIR_DOWN
  DIR_UP          = scroller.DIR_UP

  ' enum: scrolling duration
  SCROLL_UNKNOWN      = scroller.SCROLL_UNKNOWN
  SCROLL_FOREVER      = scroller.SCROLL_FOREVER
  SCROLL_ONCE         = scroller.SCROLL_ONCE
  SCROLL_ONCE_TO_CLEAR = scroller.SCROLL_ONCE_TO_CLEAR
  SCROLL_N_TIMES      = scroller.SCROLL_N_TIMES

  ' enum: text alignment (these start from 0 decimal)
  #0, ALIGN_UNKNOWN, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_LEFT

  ' FIXME: UNDONE make this user configurable
  MAX_SCROLLING_REGIONS = 4

OBJ { Objects Used by this Object }

    hub75Bffrs  :   "isp_hub75_hwBufferAccess"
    pixels      :   "isp_hub75_screenUtils"
    panelSet    :   "isp_hub75_panel"
    fonts       :   "isp_hub75_fonts"
    hwEnum      :   "isp_hub75_hwEnums"  ' hub75 attachment, set up constants
    colorUtils :    "isp_hub75_colorUtils"
    scroller[MAX_SCROLLING_REGIONS] : "isp_hub75_scrollingText"

VAR { Object Instance Variables }
    LONG    instanceID
    LONG    chainIndex
    LONG    currTextColor
    LONG    cursorLine
    LONG    cursorColumn
    LONG    maxTextLines
    LONG    maxTextColumns
    LONG    maxDisplayRows
    LONG    maxDisplayColumns
    LONG    maxPanels
    LONG    cog

    WORD columnsPerPanel
    WORD rowsPerPanel

    BYTE    selectedTextFont
    BYTE    bFontIsDithered
    BYTE    topOffsetInPix
    BYTE    leftOffsetInPix
    BYTE    charHeightInPix
    BYTE    charWidthInPix
    BYTE    horizontalGapInPix
    BYTE    verticalGapInPix
    BYTE    hBitmapOffsetInPix
    BYTE    maxPanelTextLines
    BYTE    maxPanelTextColumns
    BYTE    panelFixupOffetInPix

    BYTE    bScan_1_4
    BYTE    bSwapRB
    BYTE    bSwapGB

    LONG    bDidShowOnce
    BYTE   padBuffer[MAX_PAD_BUFFER_BYTES]

CON { PRIVATE Constants }

    MAX_PAD_BUFFER_BYTES = 30

PUB null()
'' This is not a top level object

PUB start(nChainIdx) : ok
    '' Start the underlying driver(s)
    ok := startWithId(0, nChainIdx)

PUB startWithId(nId, nChainIdx) : ok | scrollerIndex, dvrConfig, eChipType
'' Start the underlying driver(s) - (multi-hub75 card version, pass debug instance ID)
    chainIndex := nChainIdx
    instanceID := nId
    bDidShowOnce := FALSE
    bytefill(@padBuffer, 0, MAX_PAD_BUFFER_BYTES)

    ok := cog := -1 ' mark as failed, initially

    debug("DSP: start() #", udec_(instanceID))
    ok := cog := panelSet.start(instanceID, chainIndex)   ' send buffer to driver
    if ok == -1
        debug("DSP: underlying drivers failed!")
        abort

    ' now that we know our chainIndex for this instance, we can record geometry info
    maxDisplayRows, maxDisplayColumns := hub75Bffrs.displaySizeInPixels(chainIndex)
    maxPanels := hub75Bffrs.maxPanels(chainIndex)
    rowsPerPanel, columnsPerPanel := hub75Bffrs.panelSizeInPixels(chainIndex)

    debug("DSP: BFFR screen[", udec_long_(hub75Bffrs.displaySizeInLongs(chainIndex)), "] 0x", uhex_long_(hub75Bffrs.displayBufferAddress(chainIndex)))

    dvrConfig, eChipType := hub75Bffrs.getDriverFlags(chainIndex)
    bScan_1_4 := (dvrConfig & hwEnum.SCAN_4) > 0 ? True : False
    bSwapRB := (dvrConfig & hwEnum.RB_SWAP) > 0 ? True : False
    bSwapGB := (dvrConfig & hwEnum.GB_SWAP) > 0 ? True : False

    ' configure our scrollers for first use
    repeat scrollerIndex from 0 to MAX_SCROLLING_REGIONS - 1
        scroller[scrollerIndex].initialize(chainIndex)
    ' now set text font - which also tell scrollers!
    setTextFont(TEXT_FONT_DEFAULT)

    homeCursor()
    setTextColor($AAAAAA)
    clearScreen()

PUB stop()
    '' Stop the underlying driver(s)
    if cog
        panelSet.stop()
        cog := 0

PUB setBufferPointers(nChainIdx, pScrnBuffer, pPwmFrameSet1, pPwmFrameSet2)

'' forward the buffer pointers to the underlying buffer access routines
''
'' @param nChainIdx - the index of the desired chain
'' @param pScrnBuffer - address of screen Buffer (2-3 bytes per pixel)
'' @param pPwmFrameSet1 - address of PWM Frame-Set 1 (4 bits per pixel * color depth)
'' @param pPwmFrameSet2 - address of PWM Frame-Set 2 (4 bits per pixel * color depth)

    hub75Bffrs.setBufferPointers(nChainIdx, pScrnBuffer, pPwmFrameSet1, pPwmFrameSet2)

PUB clearScreen()
    '' Clear the panel to BLACK
    hub75Bffrs.zeroFillBuffer(chainIndex)
    commitScreenToPanelSet()

PUB clearScreenBuffer()
    '' Clear the panel to BLACK
    hub75Bffrs.zeroFillBuffer(chainIndex)

PUB fillScreen(rgbColor) | row, column
    '' Fill the display with 24-bit color value
    repeat maxDisplayRows with row
        repeat maxDisplayColumns with column
            pixels.drawPixelAtRC(chainIndex, row, column, rgbColor)

PUB fillPanel(panelIndex, rgbColor) | row, column, columnOffsetToPanel
    '' Fill the specified panel (of panelSet) with 24-bit color value
    ' panels are numbered from n-1 head of the chain (where signal enters the panel-set) to 0 at the end
    debug("fillPanel(", udec_(panelIndex), ") ", udec_(columnsPerPanel), "x", udec_(rowsPerPanel), " @ ", udec_(hub75Bffrs.offsetToPanel(chainIndex, panelIndex)))
    columnOffsetToPanel := panelIndex * columnsPerPanel

    repeat rowsPerPanel with row
        repeat columnsPerPanel with column
            'if row == 0 and (column < 4 or column > columnsPerPanel - 4)
                'if not bDidShowOnce
                '    debug("- fillPanel row=0 col=", udec_(column), ", ", udec(columnOffsetToPanel))
            pixels.drawPixelAtRC(chainIndex, row, column + columnOffsetToPanel, rgbColor)
    'bDidShowOnce := TRUE

PUB fillScreenNoPWM(threeBitColor)
    '' Fill screen but without PWM (for testing underlying driver)
    panelSet.fillScreenNoPWM(threeBitColor)

PUB commitScreenToPanelSet()
    '' Write screen to panel driver PWM frames (while alternating PWM frame sets)
    'debug("DSP: commit!")

    if bScan_1_4
        panelSet.convertScreen2PWM_14(hub75Bffrs.displayBufferAddress(0), bSwapRB, bSwapGB)
    else
        panelSet.convertScreen2PWM(hub75Bffrs.displayBufferAddress(0), bSwapRB, bSwapGB)


CON { --------------     Text Handling     -------------- }

PUB setCursor(line, column)
    '' Position the text cursor to row, column on our display
    ' TODO emit error on bad column/row?
    cursorLine := 0 #> line <# maxTextLines - 1
    cursorColumn := 0 #> column <# maxTextColumns - 1
    'debug("crsr: ln=", udec_(cursorLine), ", col=", udec_(cursorColumn))

PUB homeCursor()
    '' Return the cursor to top left corner of our display
    setCursor(0, 0)

PUB setCursorOnPanel(line, column, panelIndex) | boundedPanelIndex, panelOffsetInChars, boundedColumn, tmpCharOffsetInPix, desiredCharOffsetInPix, fixUpInPix
    '' Position the text cursor to row, column of the selected panel
    boundedPanelIndex := 0 #> panelIndex <# maxPanels - 1
    boundedColumn := 0 #> column <# maxPanelTextColumns - 1
    cursorLine := 0 #> line <# maxPanelTextLines - 1
    panelOffsetInChars := (boundedPanelIndex * maxPanelTextColumns) + boundedColumn
    cursorColumn := panelOffsetInChars
    tmpCharOffsetInPix := leftOffsetInPix + (cursorColumn * (charWidthInPix + horizontalGapInPix))
    desiredCharOffsetInPix := leftOffsetInPix + (columnsPerPanel * boundedPanelIndex) + (boundedColumn * (charWidthInPix + horizontalGapInPix))
    panelFixupOffetInPix := (tmpCharOffsetInPix < desiredCharOffsetInPix) ? desiredCharOffsetInPix - tmpCharOffsetInPix: 0

PUB homeCursorOnPanel(panelIndex)
    '' Return the cursor to top left corner of the selected panel
    setCursorOnPanel(0, 0, panelIndex)

PUB setTextFont(newFont) | scrollerIndex, hUnusedPix, vUnusedPix, heightCorrection
    '' Select font and update text grid size
    ' currently we only support our 8x8 and 5x7 fonts
    panelFixupOffetInPix := 0
    heightCorrection := 0
    hBitmapOffsetInPix := 0
    case newFont
        TEXT_FONT_DEFAULT..TEXT_FONT_5x7:
            heightCorrection := 1
        TEXT_FONT_5x7_DITH:
            heightCorrection := 1
        TEXT_FONT_5x7_DITH_DCNDR:
            heightCorrection := 1
        TEXT_FONT_8x8A:
            hBitmapOffsetInPix := 1
        TEXT_FONT_8x8B:
        OTHER:
            debug("*ERROR* unknown text size*")
            abort

    selectedTextFont := newFont
    charWidthInPix, charHeightInPix := fonts.getGeometryOfFont(newFont)
    maxTextLines := (maxDisplayRows / (charHeightInPix + heightCorrection))
    maxTextColumns := (maxDisplayColumns / (charWidthInPix + heightCorrection))

    bFontIsDithered := fonts.isDitheredFont(newFont)

    vUnusedPix := maxDisplayRows - (maxTextLines * charHeightInPix)
    hUnusedPix := maxDisplayColumns - (maxTextColumns * charWidthInPix)
    verticalGapInPix := vUnusedPix / maxTextLines
    horizontalGapInPix := hUnusedPix / maxTextColumns
    vUnusedPix := maxDisplayRows - (maxTextLines * (charHeightInPix + verticalGapInPix))
    hUnusedPix := maxDisplayColumns - (maxTextColumns * (charWidthInPix + horizontalGapInPix))
    topOffsetInPix := (vUnusedPix + 1) >> 1
    leftOffsetInPix := (hUnusedPix + 1) >> 1

    maxPanelTextLines := ((rowsPerPanel - topOffsetInPix) / (charHeightInPix + verticalGapInPix))
    maxPanelTextColumns := ((columnsPerPanel - leftOffsetInPix) / (charWidthInPix + horizontalGapInPix))

    'debug("DSP: TEXT: ", udec(maxTextColumns), udec(maxTextLines))

    'debug("DSP: font ", udec(charHeightInPix), udec(charWidthInPix), udec(maxTextLines), udec(maxTextColumns), udec(verticalGapInPix), udec(horizontalGapInPix), udec(topOffsetInPix), udec(leftOffsetInPix))

    ' configure our scrollers for font choice
    repeat scrollerIndex from 0 to MAX_SCROLLING_REGIONS - 1
        scroller[scrollerIndex].setFontInfo(maxTextColumns, charWidthInPix, charHeightInPix, leftOffsetInPix, horizontalGapInPix, hBitmapOffsetInPix, selectedTextFont)

PUB numberTextLines() : nbrTextLines
    '' Return the number of text-rows for the currently selected font
    nbrTextLines := maxTextLines

PUB numberTextColumns() : nbrTextColumns
    '' Return the number of text-columns for the currently selected font
    nbrTextColumns := maxTextColumns

PUB setTextColor(rgbColor)
    '' Set 24-bit color for subsequent text display
    currTextColor := rgbColor

PUB setTextAtCursor(pZString)
    '' Place text 'zero terminated' at our current cursor position using current text color
    setColoredTextAtLnCol(cursorLine, cursorColumn, pZString, currTextColor)

PUB setColoredTextAtLnCol(line, column, pZString, rgbColor) | charIndex
    '' Place text at specific cursor position using current text color
    setCursor(line, column)
    charIndex := 0
    repeat
        if BYTE[pZString][charIndex] <> 0
            setColorCharAtCursor(BYTE[pZString][charIndex++], rgbColor)
    while BYTE[pZString][charIndex] <> 0

PUB centerColoredTextAtLn(line, pZString, rgbColor) | textLen, desiredCol
    '' Center text on specific line using current text color
    textLen := strsize(pZString)
    desiredCol := (numberTextColumns() - textLen) / 2    ' Calc centering value for clock
    'debug("DSP: cctal() ", udec(desiredCol), udec(textLen), zstr(pZString))
    setColoredTextAtLnCol(line, desiredCol, pZString, rgbColor)

VAR
  LONG      lastColumn

PUB setColoredTextAtLnWithAlignPad(line, pZString, rgbColor, alignment, padLen) | offset, valLen, lineWidth, paddedStr, padOffset
    '' Align and Pad text on specific line using current text color
    paddedStr := pZString
    valLen := strsize(pZString)

    'debug("sctalwap: ln=", udec_(line), " [", zstr_(pZString), "](", udec_(valLen), ") ", udec(alignment), udec(padLen))
    lineWidth := numberTextColumns()
    ' calc padded string offset
    case alignment
        ALIGN_RIGHT:
            ' pad on left
            offset := lineWidth - valLen
        ALIGN_CENTER:
            ' 1/2 padLen on left
            offset := (lineWidth - valLen) / 2
        other:
            ' ALIGN_CENTER - pad on right
            offset := 0

    'if padLen == 5 and offset <> 5
    lastColumn := offset + padLen
    if lastColumn <> 10
      debug("DSP: ERROR1: off Edge? r,c=[", udec_(line), ",", udec_(offset), "] ", udec(padLen), udec(valLen), ", [", zstr_(pZString), "] endCol=", udec_(lastColumn))

    ' if we need to pad...
    if valLen < padLen
        bytefill(@padBuffer, 0, MAX_PAD_BUFFER_BYTES)
        case alignment
            ALIGN_RIGHT:
                ' pad on left
                padOffset := padLen - valLen
                bytefill(@padBuffer, $20, padOffset)
            ALIGN_CENTER:
                ' 1/2 padLen on left
                padOffset := (padLen - valLen) / 2
                bytefill(@padBuffer, $20, padOffset)
            other:
                ' ALIGN_CENTER - pad on right
                bytefill(@padBuffer, $20, padLen)
                padOffset := 0
        bytemove(@BYTE[@padBuffer][padOffset], pZString, valLen)
        paddedStr := @padBuffer

    'debug("               [", zstr_(paddedStr), "](", udec_(strsize(paddedStr)), ") col=", udec_(offset))
    if strsize(paddedStr) + offset > lineWidth
        debug("DSP: ERROR2: off Edge! ", udec(offset), udec(padLen), udec(valLen), zstr(pZString))
    setColoredTextAtLnCol(line, offset, paddedStr, rgbColor)

PUB setCharAtCursor(cChar)
    '' Write char to current cursor position using current text color, increment the cursor position with line wrap
    setColorCharAtCursor(cChar, currTextColor)

PUB setColorCharAtCursor(cChar, rgbColor)
    '' Write char to current cursor position with given text color, increment the cursor position with line wrap
    setColoredCharAtLnCol(cursorLine, cursorColumn, cChar, rgbColor)
    incrCursorWithWrap()

PUB setCharAtLnCol(line, column, cChar)
    '' Write character to display at R,C using current text color
    setColoredCharAtLnCol(line, column, cChar, currTextColor)

PUB setColoredCharAtLnCol(line, column, cChar, rgbColor) | pCharBitMap, tlScreenOffset, tlCharOffset, cLineIdx, cColumnIdx, sRowPixIdx, sColumnPixIdx, cColOffset, cRowOffset, cRowBits, pixColumn
    '' Write cChar to display R,C using rgbColor
    'debug("DSP: setCharAtCursor @LnCol(", udec_(line), ",", udec_(column), "), char=", uhex_(cChar), ", RGB=", uhex_long_(rgbColor), udec(topOffsetInPix), udec(leftOffsetInPix))
    cLineIdx := 0 #> line <# maxTextLines - 1
    cColumnIdx :=  0 #> column <# maxTextColumns - 1
    ' get pointer to character bitmap
    pCharBitMap := fonts.getCharAddrForFont(selectedTextFont, cChar)
    'debug("- pChar=", uhex_long(pCharBitMap))
    ' NOTE: cursor is 0-relative so add in our top/left offset to get row/col and mult by char size in pix
    sRowPixIdx := topOffsetInPix + (cLineIdx * (charHeightInPix + verticalGapInPix))
    ' NOTE: panelFixupOffetInPix is only non-zero when we are placing text on specific panel!
    sColumnPixIdx := leftOffsetInPix + panelFixupOffetInPix + (cColumnIdx * (charWidthInPix + horizontalGapInPix))

    if bFontIsDithered
        placeDitheredCharBitmap(pCharBitMap, sRowPixIdx, sColumnPixIdx, rgbColor)
    else
        placeCharBitmap(pCharBitMap, sRowPixIdx, sColumnPixIdx, rgbColor)

PRI placeCharBitmap(pCharBitMap, sRowPixIdx, sColumnPixIdx, rgbColor) | cRowOffset, cRowBits, cColOffset, pixColor, cBitOffset
    repeat cRowOffset from 0 to charHeightInPix - 1
        cRowBits := BYTE[pCharBitMap][cRowOffset]
        repeat cColOffset from 0 to charWidthInPix - 1
            cBitOffset := (charWidthInPix - 1) - cColOffset
            pixColor := ((cRowBits & (1 << cBitOffset)) > 0) ? rgbColor : $000000
            pixels.drawPixelAtRC(chainIndex, sRowPixIdx + cRowOffset, sColumnPixIdx + cColOffset, pixColor)

PRI placeDitheredCharBitmap(pCharBitMap, sRowPixIdx, sColumnPixIdx, rgbColor) | cRowOffset, cRowBits, cColOffset, ditheredRGBColor, cBitOffset, pixVal, pixColor
    ditheredRGBColor := colorUtils.reducedBrightnessOfCValue(rgbColor, 36)      ' 50% brightness
    'debug(" COLOR PERCENT ", uhex_long_(rgbColor), " -> ", uhex_long_(ditheredRGBColor))
    repeat cRowOffset from 0 to charHeightInPix - 1
        cRowBits := WORD[pCharBitMap][cRowOffset]         ' ms 12 bits are char def'n (of the 16bits)
        'debug(" FONT row ", ubin_word_(cRowBits))
        repeat cColOffset from 0 to charWidthInPix - 1
            cBitOffset := cColOffset * 2
            pixVal := ((cRowBits << cBitOffset) & $c000) >> 14
            'debug("   PIX ", ubin_(pixVal))
            pixColor := rgbColor
            if pixVal <> 3
                 pixColor := (pixVal == 1) ? ditheredRGBColor : $000000    ' val == [2,0] = black
            pixels.drawPixelAtRC(chainIndex, sRowPixIdx + cRowOffset, sColumnPixIdx + cColOffset, pixColor)

PRI offsetToTextOnPanel(line, column, panelIndex) : panelLine, panelColumn | gridRow, gridColumn, boundedPanelIndex, boundedColumn, tmpCharOffsetInPix, panelOffsetInChars, desiredCharOffsetInPix
    boundedPanelIndex := 0 #> panelIndex <# maxPanels - 1
    boundedColumn := 0 #> column <# maxPanelTextColumns - 1
    panelLine := 0 #> line <# maxPanelTextLines - 1
    panelOffsetInChars := (boundedPanelIndex * maxPanelTextColumns) + boundedColumn
    panelColumn := panelOffsetInChars
    tmpCharOffsetInPix := leftOffsetInPix + (cursorColumn * (charWidthInPix + horizontalGapInPix))
    desiredCharOffsetInPix := leftOffsetInPix + (columnsPerPanel * boundedPanelIndex) + (boundedColumn * (charWidthInPix + horizontalGapInPix))
    'panelFixupOffetInPix := (tmpCharOffsetInPix < desiredCharOffsetInPix) ? desiredCharOffsetInPix - tmpCharOffsetInPix: 0

PRI incrCursorWithWrap() | priorRow, priorCol
    ' increment cursor position, wrapping at end of line when needed
    priorRow := cursorLine
    priorCol := cursorColumn
    cursorColumn++
    if cursorColumn > maxTextColumns - 1
        cursorColumn := 0
        cursorLine++
        if cursorLine > maxTextLines - 1
            cursorLine := 0
    'debug("incr curPOS RC(", udec_(priorRow), ",", udec_(priorCol), ") -> RC(", udec_(cursorLine), ",", udec_(cursorColumn), ")")


CON { --------------     Scrolling Text     -------------- }
' EXAMPLES
'    configureScrollLoopMode(scrollerID, display.SCROLL_ONCE)
'    configureScrollLoopCount(scrollerID, display.SCROLL_N_TIMES, 2)

PUB configureScrollLoopMode(indexAllocated, loopMode)
    '' Specify scrolling text duration (forever, once, twice)
    'debug("DSP: configureScrollLoopMode() ", udec(indexAllocated))
    if indexAllocated >= 0 && indexAllocated < MAX_SCROLLING_REGIONS
        'debug("DSP: idx=(", udec_(indexAllocated), ") ", udec(loopMode))
        scroller[indexAllocated].configureScrollLoopMode(loopMode)
    else
        debug("DSP: ERROR no such scroller idx=(", udec_(indexAllocated), ")")

PUB configureScrollLoopCount(indexAllocated, loopMode, loopCount)
    '' Specify scrolling text duration (forever, once, twice)
    'debug("DSP: configureScrollLoopCount() ", udec(indexAllocated))
    if indexAllocated >= 0 && indexAllocated < MAX_SCROLLING_REGIONS
        scroller[indexAllocated].configureScrollLoopCount(loopMode, loopCount)


PUB scrollTextOnLine(line, pZString, direction) : indexAllocated
    '' Place scrolling text on line N, of pZString scrolling in direction using current text color
    indexAllocated := scrollColoredTextOnLn(line, pZString, direction, currTextColor)


PUB scrollColoredTextOnLn(line, pZString, direction, rgbColor) : indexAllocated  | cLineIdx, cColumnIdx, widthInChars, sRowPixIdx, sColumnPixIdx
    '' Place scrolling text on line N [0 - N-1], of pZString scrolling in direction using rgbColor
    'debug("DSP: scrollColoredTextOnLn()")
    ' ensure we are asked to use a good location
    cLineIdx := 0 #> line <# maxTextLines - 1
    cColumnIdx :=  0
    ' convert line info to row,col
    ' NOTE: cursor is 0-relative so add in our top/left offset to get row/col and mult by char size in pix
    widthInChars := maxTextColumns
    sRowPixIdx := topOffsetInPix + (cLineIdx * (charHeightInPix + verticalGapInPix))
    sColumnPixIdx := leftOffsetInPix + (cColumnIdx * (charWidthInPix + horizontalGapInPix))

    indexAllocated := scrollTextAtRCOfColor(sRowPixIdx, sColumnPixIdx, widthInChars, pZString, direction, rgbColor)
    debug("DSP: new scroller ", udec(indexAllocated))

PUB scrollTextOnLnOfNPanels(line, panelIndex, panelCount, pZString, direction) : indexAllocated
    '' Place scrolling text on line N, of pZString scrolling in direction using current text color
    indexAllocated := scrollColoredTextOnLnOfNPanels(line, panelIndex, panelCount, pZString, direction, currTextColor)

PUB scrollColoredTextOnLnOfNPanels(line, panelIndex, panelCount, pZString, direction, rgbColor) : indexAllocated | cLineIdx, cColumnIdx, widthInChars, sRowPixIdx, sColumnPixIdx, panelLine, panelColumn, boundedPanelIdx, cPanelCt, offsetPixelRows, offsetPixelColumns
    '' Place scrolling text on line N [0 - N-1], of pZString scrolling in direction using rgbColor
    'debug("DSP: scrollColoredTextOnLnOfNPanels()")
    boundedPanelIdx := 0 #> panelIndex <# maxPanels - 1
    cPanelCt := 1 #> panelCount <# maxPanels
    cLineIdx := 0 #> line <# maxTextLines - 1
    cColumnIdx :=  0
    widthInChars := ((cPanelCt * columnsPerPanel) - (2 * leftOffsetInPix)) / (charWidthInPix + horizontalGapInPix)
    'panelLine, panelColumn := offsetToTextOnPanel(cLineIdx, cColumnIdx, panelIndex)
    offsetPixelRows, offsetPixelColumns := hub75Bffrs.offsetToPanel(chainIndex, panelIndex)
    ' ensure we are asked to use a good location
    ' convert line info to row,col
    ' NOTE: cursor is 0-relative so add in our top/left offset to get row/col and mult by char size in pix
    sRowPixIdx := topOffsetInPix + (cLineIdx * (charHeightInPix + verticalGapInPix))
    sColumnPixIdx := offsetPixelColumns + leftOffsetInPix
    indexAllocated := scrollTextAtRCOfColor(sRowPixIdx, sColumnPixIdx, widthInChars, pZString, direction, rgbColor)

PUB scrollTextAtRC(row, column, widthInChars, pZString, direction) : indexAllocated
    '' Place scrolling text at absolute R,C, of pZString scrolling in direction using current text color
    indexAllocated := scrollTextAtRCOfColor(row, column, widthInChars, pZString, direction, currTextColor)


PUB scrollTextAtRCOfColor(row, column, widthInChars, pZString, direction, rgbColor) : indexAllocated
    '' Place scrolling text at absolute R,C, of pZString scrolling in direction using rgbColor
    indexAllocated := nextFreeScroller()
    'debug("DSP: scrollTextAtRCOfColor() ", udec(indexAllocated))
    scroller[indexAllocated].scrollTextAtRCOfColor(row, column, widthInChars, pZString, direction, rgbColor)


PUB isScrollingComplete() : status | scrollerIndex
    '' Return T/F where T means that all movement for scrolling text regions is complete
    status := TRUE
    ' if one or more scrollers are still moving we are not done!
    repeat scrollerIndex from 0 to MAX_SCROLLING_REGIONS - 1
        ' is this scroller active?
        if NOT scroller[scrollerIndex].isIdle()
            ' is its' scrolling complete?
            if NOT scroller[scrollerIndex].isScrollingComplete()
                status := FALSE
                quit    ' outta here we have our answer
    'if status
    '    debug("DSP: isScrollingComplete() TRUE")

PUB animateScroll() | scrollerIndex
    '' Do one scroll step, if one is pending
    repeat scrollerIndex from 0 to MAX_SCROLLING_REGIONS - 1
        if NOT scroller[scrollerIndex].isIdle()
            if NOT scroller[scrollerIndex].isScrollingComplete()
                scroller[scrollerIndex].animateScroll()

PUB releaseScroller(indexAllocated)
    '' Mark this scroller as no longer in use
    if indexAllocated > 0 and indexAllocated < MAX_SCROLLING_REGIONS
        ' make this once again avial for reuse
        scroller[indexAllocated].release()

PRI nextFreeScroller() : scrollerIndexToUse | scrollerIndex
    scrollerIndexToUse := NOT_FOUND
    repeat scrollerIndex from 0 to MAX_SCROLLING_REGIONS - 1
        if scroller[scrollerIndex].isIdle()
            scrollerIndexToUse := scrollerIndex
            quit
    if scrollerIndexToUse == NOT_FOUND
        debug("Failed to locate free scroller!")
        abort
    'debug("DSP: nextFreeScroller() ", udec(scrollerIndexToUse))

CON { --------------     Basic Graphics     -------------- }

PUB drawBox(topRow, leftColumn, width, height, filled)
'' Draw box within the display outline/filled of width x height at R,C (using current text color)
''   - use preceeding setTextColor() to set the outline color
''
'' @param topRow - row number of top left corner
'' @param leftColumn - column number of top left corner
'' @param width - width of box in pixels (including outline)
'' @param height - height of box in pixels
'' @param filled - T/F where T = filled with current text color

    drawBoxOfColor(topRow, leftColumn, width, height, filled, currTextColor)

PUB drawBoxOfColor(topRow, leftColumn, width, height, filled, rgbColor) | rightColumn, bottomRow, rowIndex
'' Draw box within the display outline/filled of width x height at R,C using rgbColor)
''
'' @param topRow - row number of top left corner
'' @param leftColumn - column number of top left corner
'' @param width - width of box in pixels (including outline)
'' @param height - height of box in pixels
'' @param filled - T/F where T = filled with current text color
'' @param rgbColor - the 24-bit color value to use for the box & fill

' Local Variables:
' @local rightColumn -
' @local bottomRow -
' @local rowIndex -

    rightColumn := leftColumn + width - 1
    bottomRow := topRow + height - 1
    if filled == TRUE
        repeat rowIndex from 0 to height - 1
            drawLineOfColor(topRow + rowIndex, leftColumn, topRow + rowIndex, rightColumn, rgbColor)    ' horiz row
    else
        drawLineOfColor(topRow, leftColumn, topRow, rightColumn, rgbColor)    ' horiz top
        drawLineOfColor(topRow, rightColumn, bottomRow, rightColumn, rgbColor)    ' vert right
        drawLineOfColor(bottomRow, leftColumn, bottomRow, rightColumn, rgbColor)    ' horiz bottom
        drawLineOfColor(topRow, leftColumn, bottomRow, leftColumn, rgbColor)    ' vert left

PUB drawPanelBox(panelIndex, topRow, leftColumn, width, height, filled)
'' Draw a box in desired panel outline/filled of width x height at R,C (using current text color)
''   - use preceeding setTextColor() to set the outline color
''
'' @param panelIndex - index to panel within the display
'' @param topRow - row number of top left corner
'' @param leftColumn - column number of top left corner
'' @param width - width of box in pixels (including outline)
'' @param height - height of box in pixels
'' @param filled - T/F where T = filled with current text color

    drawPanelBoxOfColor(panelIndex, topRow, leftColumn, width, height, filled, currTextColor)

PUB drawPanelBoxOfColor(panelIndex, topRow, leftColumn, width, height, filled, rgbColor) | rightColumn, bottomRow, rowIndex, offsetPixelRows, offsetPixelColumns
'' Draw a box in desired panel a box outline/filled of width x height at R,C using rgbColor
''
'' @param panelIndex - index to panel within the display
'' @param topRow - row number of top left corner
'' @param leftColumn - column number of top left corner
'' @param width - width of box in pixels (including outline)
'' @param height - height of box in pixels
'' @param filled - T/F where T = filled with current text color
'' @param rgbColor - the 24-bit color value to use for the box & fill

' Local Variables:
' @local rightColumn -
' @local bottomRow -
' @local rowIndex -
' @local offsetPixelRows -
' @local offsetPixelColumns -

    offsetPixelRows, offsetPixelColumns := hub75Bffrs.offsetToPanel(chainIndex, panelIndex)
    topRow :=  0 #> topRow <# rowsPerPanel - 1
    leftColumn :=  0 #> leftColumn <# columnsPerPanel - 1
    height :=  0 #> height <# rowsPerPanel - 1
    width :=  0 #> width <# columnsPerPanel - 1
    rightColumn := leftColumn + width - 1
    bottomRow := topRow + height - 1
    ' offset everything to desired panel
    topRow += offsetPixelRows
    bottomRow += offsetPixelRows
    leftColumn += offsetPixelColumns
    rightColumn += offsetPixelColumns
    if filled == TRUE
        repeat rowIndex from 0 to height - 1
            drawLineOfColor(topRow + rowIndex, leftColumn, topRow + rowIndex, rightColumn, rgbColor)    ' horiz row
    else
        drawLineOfColor(topRow, leftColumn, topRow, rightColumn, rgbColor)    ' horiz top
        drawLineOfColor(topRow, rightColumn, bottomRow, rightColumn, rgbColor)    ' vert right
        drawLineOfColor(bottomRow, leftColumn, bottomRow, rightColumn, rgbColor)    ' horiz bottom
        drawLineOfColor(topRow, leftColumn, bottomRow, leftColumn, rgbColor)    ' vert left

PUB drawLine(fmRow, fmColumn, toRow, toColumn)
    '' Draw line fromRC -> toRC using current text color (currently limited to horizontal/vertical lines)
    drawLineOfColor(fmRow, fmColumn, toRow, toColumn, currTextColor)

PUB drawLineOfColor(fmRow, fmColumn, toRow, toColumn, rgbColor) | row, column, dx, dy, ctr, incr, intD
    '' Draw line fromRC -> toRC using rgbColor (currently limited to horizontal/vertical lines)
    fmRow :=  0 #> fmRow <# maxDisplayRows - 1
    fmColumn :=  0 #> fmColumn <# maxDisplayColumns - 1
    toRow :=  0 #> toRow <# maxDisplayRows - 1
    toColumn :=  0 #> toColumn <# maxDisplayColumns - 1
    debug("seg:drwLn fmRC=(", udec_(fmRow), ",", udec_(fmColumn), "), toRC=(", udec_(toRow), ",", udec_(toColumn), "), RGB=(", uhex_long(rgbColor), ")")
    if fmRow == toRow
        ' draw Horizontal Line
        repeat column from fmColumn to toColumn
            pixels.drawPixelAtRC(chainIndex, fmRow, column, rgbColor)
    elseif fmColumn == toColumn
        ' draw Vertical Line
        repeat row from fmRow to toRow
            pixels.drawPixelAtRC(chainIndex, row, fmColumn, rgbColor)
    else
        if abs(toRow - fmRow) < abs(toColumn - fmColumn)
            if fmColumn > toColumn
                plotLineLow(toColumn, toRow, fmColumn, fmRow, rgbColor)
            else
                plotLineLow(fmColumn, fmRow, toColumn, toRow, rgbColor)
        else
            if fmRow > toRow
                plotLineHigh(toColumn, toRow, fmColumn, fmRow, rgbColor)
            else
                plotLineHigh(fmColumn, fmRow, toColumn, toRow, rgbColor)

PUB drawPanelLine(panelIndex, fmRow, fmColumn, toRow, toColumn)
    '' Draw line fromRC -> toRC using current text color (currently limited to horizontal/vertical lines)
    drawPanelLineOfColor(panelIndex, fmRow, fmColumn, toRow, toColumn, currTextColor)

PUB drawPanelLineOfColor(panelIndex, fmRow, fmColumn, toRow, toColumn, rgbColor) | row, column, dx, dy, ctr, incr, intD, desiredPanelIndex, offsetPixelRows, offsetPixelColumns
    '' Draw line fromRC -> toRC using rgbColor (currently limited to horizontal/vertical lines)
    fmRow :=  0 #> fmRow <# rowsPerPanel - 1
    fmColumn :=  0 #> fmColumn <# columnsPerPanel - 1
    toRow :=  0 #> toRow <# rowsPerPanel - 1
    toColumn :=  0 #> toColumn <# columnsPerPanel - 1
    desiredPanelIndex :=  0 #> panelIndex <# maxPanels - 1
    offsetPixelRows, offsetPixelColumns := hub75Bffrs.offsetToPanel(chainIndex, panelIndex)
    'debug("seg:drwLn fmRC=(", udec_(fmRow), ",", udec_(fmColumn), "), toRC=(", udec_(toRow), ",", udec_(toColumn), "), RGB=(", uhex_long(rgbColor), ")")
    drawLineOfColor(fmRow + offsetPixelRows, fmColumn + offsetPixelColumns, toRow + offsetPixelRows, toColumn + offsetPixelColumns, rgbColor)


PRI plotLineLow(x0, y0, x1, y1, rgbColor) | row, column, dy, dx, D, yi
    dx := x1 - x0
    dy := y1 - y0
    yi := 1
    if dy < 0
        yi := -1
        dy := -dy
    D := (2 * dy) - dx
    row := y0

    repeat column from x0 to x1
        pixels.drawPixelAtRC(chainIndex, row, column, rgbColor)
        if D > 0
            row := row + yi
            D := D + (2 * (dy - dx))
        else
            D := D + 2 * dy

PRI plotLineHigh(x0, y0, x1, y1, rgbColor) | row, column, dy, dx, D, xi
    dx := x1 - x0
    dy := y1 - y0
    xi := 1
    if dx < 0
        xi := -1
        dx := -dx
    D := (2 * dx) - dy
    column := x0

    repeat row from y0 to y1
        pixels.drawPixelAtRC(chainIndex, row, column, rgbColor)
        if D > 0
            column := column + xi
            D := D + (2 * (dx - dy))
        else
            D := D + 2*dx

PUB drawCircle(row, column, radius)
'' Draw circle centered at R,C of radius using current text color
''   - use preceeding setTextColor() to set the outline color
''
'' @param row - row number of center-point
'' @param column - column number of center-point
'' @param radius - radius of circle

    drawCircleOfColor(row, column, radius, currTextColor)


PUB drawCircleOfColor(ctrRow, ctrColumn, radius, rgbColor) | column, row, decision
'' Draw circle centered at R,C of radius using rgbColor
''
'' @param row - row number of center-point
'' @param column - column number of center-point
'' @param radius - radius of circle
'' @param rgbColor - draw outline using this 24-bit color value

' Local Variables:
' @local column -
' @local row -
' @local decision -

    ' Function for circle-generation
    ' using Bresenham's algorithm
    column := 0
    row := radius
    decision := 3 - 2 * radius
    drawCirclePointsOfColor(ctrRow, ctrColumn, row, column, rgbColor)
    repeat while (row >= column)
        column++
        ' check for decision parameter
        ' and correspondingly
        ' update decision, column, row
        if (decision > 0)
            row--
            decision := decision + 4 * (column - row) + 10
        else
            decision := decision + 4 * column + 6
        drawCirclePointsOfColor(ctrRow, ctrColumn, row, column, rgbColor)


PRI drawCirclePointsOfColor(ctrRow, ctrColumn, row, column, rgbColor)
    ' for each pixel we will
    ' draw all eight pixels
    pixels.drawPixelAtRC(chainIndex, ctrColumn+column, ctrRow+row, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn-column, ctrRow+row, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn+column, ctrRow-row, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn-column, ctrRow-row, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn+row, ctrRow+column, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn-row, ctrRow+column, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn+row, ctrRow-column, rgbColor)
    pixels.drawPixelAtRC(chainIndex, ctrColumn-row, ctrRow-column, rgbColor)


CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2024 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================

}}
