'' =================================================================================================
''
''   File....... isp_hub75_segment.spin2
''   Purpose.... manipulate a single mechanical segment
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 18 Oct 2020
''
'' =================================================================================================

' There are two types of segments
' one of which is rotated 3 times to get 4 shapes
' the other is the middle segment

' The mechanical segments slide on and back off of screen
' the background is generally black
'
'       A
'     F   B
'       G
'     E   C
'       D

CON { segment states, names, orientations and such }

#0, SEG_UNKNOWN, SEG_LEFT_E, SEG_LEFT_F, SEG_RIGHT_B, SEG_RIGHT_C, SEG_TOP, SEG_MIDDLE, SEG_BOTTOM
#0, STATE_UNKNOWN, STATE_OFF, STATE_3RD_ON, STATE_6TH_ON, STATE_ON, STATE_3RD_OFF ,STATE_6TH_OFF

SEG_WIDTH = 3
SEG_LENGTH = 10


cBlack = $000000

OBJ
    screen      : "isp_hub75_screenAccess"
    pixels      : "isp_hub75_screenUtils"
    color       : "isp_hub75_color"

VAR
    long    segOrientation
    long    currentState
    long    nextState
    long    segHeight
    long    segWidth
    long    segStartX
    long    segStartY
    long    segRgbColor    ' TODO add next color for when ea. digit value can be a diff color
    long    desiredEndState


PUB null()
    '' This is NOT a top level object

PUB placeSegment(row, column, orientation, initialState, rgbColor)
    'debug("seg:placeSegment rc=(", udec_(row), ",", udec_(column), "), orient=(", udec_(orientation), "), state=(", udec_(initialState), "), RGB=(", uhex_long_(rgbColor),")")
    '' Locate a desired segment on our screen. Draw initial segement if state is NOT off
    ' record settings choices we are given extrapolating some
    desiredEndState := currentState := nextState := STATE_OFF
    segStartX :=  0 #> column <# screen.MAX_PHYSICAL_COLUMNS - 1
    segStartY :=  0 #> row <# screen.MAX_PHYSICAL_ROWS - 1
    segOrientation := orientation
    segRgbColor := rgbColor
    case orientation
        SEG_TOP..SEG_BOTTOM:
            segHeight := 3
            segWidth := 10
        SEG_LEFT_E..SEG_RIGHT_C:
            segHeight := 10
            segWidth := 3
        OTHER:
            debug("SEG: BAD segment type!")
            abort
    ' if the segment is initially showing, let's draw it!
    if initialState <> currentState
        updateSegmentToState(initialState)

PUB hideSegment()
    '' Start the segment moving to _OFF if not already off
    if isMovementComplete()
        if currentState <> STATE_OFF
            moveSegmentToState(STATE_OFF)

PUB showSegment()
    'debug("seg:show orient=(", udec_(segOrientation), ")")
    '' Start the segment moving to _ON if not already on
    if isMovementComplete()
        if currentState <> STATE_ON
            moveSegmentToState(STATE_ON)

PUB isMovementComplete() : status
    '' Return T/F where T means that all movement for this segment is complete
    status := (desiredEndState == currentState)

PUB animateStep()
    '' Do one animation step, if one is pending
    if not isMovementComplete()
        updateSegmentToState(nextState)

PUB moveSegmentToState(newEndState)
    '' Start sequence of segment updates to desired state (on/off)
    'debug("seg:id(segT", udec_(segOrientation), "), moveTo (st", udec_(desiredEndState), ") -> (st", udec_(newEndState), ")")
    ' if we are asking to be in a different state then...
    if desiredEndState <> newEndState
        ' if we are not yet at an end state (still moving) then abort
        if currentState <> STATE_OFF && currentState <> STATE_ON
            debug("SEG: state still in motion, ignoring request")
            abort
        if newEndState <> STATE_OFF && newEndState <> STATE_ON
            debug("SEG: BAD end-state must be ON or OFF!")
            abort
        if newEndState == STATE_ON
            nextState := STATE_3RD_ON
        else
            nextState := STATE_3RD_OFF
        updateSegmentToState(nextState)
        desiredEndState := newEndState
    else
        debug("  -- already in desiredEndState?")

PRI updateSegmentToState(newState)
    'debug("seg:updSegToSt(segT", udec_(segOrientation), ", st", udec_(currentState), " -> st", udec_(newState), " , end-st", udec_(desiredEndState), ")")
    ' Draw segment of specific state (marking the new state as current when done)
    case segOrientation
        SEG_TOP:
            updateHorizontalSegment(newState)
        SEG_LEFT_E..SEG_LEFT_F:
            updateVerticalSegment(newState)
        SEG_RIGHT_B..SEG_RIGHT_C:
            updateVerticalSegment(newState)
        SEG_BOTTOM:
            updateHorizontalSegment(newState)
        SEG_MIDDLE:
            updateMiddleSegment(newState)
    currentState := newState


PRI updateVerticalSegment(newState) | pixInset, columnIndex
    'debug("seg:updVertSeg()")
    ' row,col points to upper-left of WIDTH columns by LENGTH rows
    if segOrientation == SEG_LEFT_E || segOrientation == SEG_LEFT_F
        ' pointing right
        if newState <> STATE_ON
            ' clear the segment
            pixInset := 0
            repeat columnIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, cBlack)
                pixInset++
        ' now draw segment lines that are showing
        case newState
            STATE_3RD_ON:   ' smallest 1 line showing
                    drawLine(segStartY + 0, segStartX + 0, segStartY + SEG_LENGTH - 1 - 0, segStartX + 0, segRgbColor)   ' shortest
                    nextState := STATE_6TH_ON
            STATE_6TH_ON:   ' smallest 2 lines showing
                    drawLine(segStartY + 0, segStartX + 0, segStartY + SEG_LENGTH - 1 - 0, segStartX + 0, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 1, segStartY + SEG_LENGTH - 1 - 1, segStartX + 1, segRgbColor)   ' shortest
                    nextState := STATE_ON
            STATE_ON:   ' all lines showing
                pixInset := 0
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, segRgbColor)
                    pixInset++
            STATE_3RD_OFF:  ' smallest 2 lines showing
                    drawLine(segStartY + 0, segStartX + 0, segStartY + SEG_LENGTH - 1 - 0, segStartX + 0, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 1, segStartY + SEG_LENGTH - 1 - 1, segStartX + 1, segRgbColor)   ' shortest
                    nextState := STATE_6TH_OFF
            STATE_6TH_OFF:  ' smallest 1 line showing
                    drawLine(segStartY + 0, segStartX + 0, segStartY + SEG_LENGTH - 1 - 0, segStartX + 0, segRgbColor)   ' shortest
                    nextState := STATE_OFF
            STATE_OFF:  ' nothing to do since we clear segment first
            OTHER:
                debug("STATE(vrtL) not yet implemented (", udec_(newstate), ")")
    else
        ' pointing left
        if newState <> STATE_ON
            ' clear the segment
            pixInset := SEG_WIDTH - 1
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, cBlack)
                    pixInset--
        ' now draw segment lines that are showing
        case newState
            STATE_3RD_ON:   ' smallest 1 line showing
                    drawLine(segStartY + 2, segStartX + 2, segStartY + SEG_LENGTH - 1 - 2, segStartX + 2, segRgbColor)   ' shortest
                    nextState := STATE_6TH_ON
            STATE_6TH_ON:   ' smallest 2 lines showing
                    drawLine(segStartY + 1, segStartX + 2, segStartY + SEG_LENGTH - 1 - 1, segStartX + 2, segRgbColor)   ' mid
                    drawLine(segStartY + 2, segStartX + 1, segStartY + SEG_LENGTH - 1 - 2, segStartX + 1, segRgbColor)   ' shortest
                    nextState := STATE_ON
            STATE_ON:   ' all lines showing
                pixInset := SEG_WIDTH - 1
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, segRgbColor)
                    pixInset--
            STATE_3RD_OFF:  ' smallest 2 lines showing
                    drawLine(segStartY + 1, segStartX + 2, segStartY + SEG_LENGTH - 1 - 1, segStartX + 2, segRgbColor)   ' mid
                    drawLine(segStartY + 2, segStartX + 1, segStartY + SEG_LENGTH - 1 - 2, segStartX + 1, segRgbColor)   ' shortest
                    nextState := STATE_6TH_OFF
            STATE_6TH_OFF:  ' smallest 1 line showing
                    drawLine(segStartY + 2, segStartX + 2, segStartY + SEG_LENGTH - 1 - 2, segStartX + 2, segRgbColor)   ' shortest
                    nextState := STATE_OFF
            STATE_OFF:  ' nothing to do since we clear segment first
            OTHER:
                debug("STATE(vrtR) not yet implemented (", udec_(newstate), ")")

PRI updateHorizontalSegment(newState) | pixInset, rowIndex
    'debug("seg:updHorizSeg()")
    ' row,col points to upper-left of LENGTH columns by WIDTH rows
    if segOrientation == SEG_TOP
        ' pointing down
        if newState <> STATE_ON
            ' clear the segment
            pixInset := 0
            repeat rowIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
                pixInset++
        case newState
            STATE_3RD_ON:   ' smallest 1 line showing
                    drawLine(segStartY + 0, segStartX + 2, segStartY + 0, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_6TH_ON
            STATE_6TH_ON:   ' smallest 2 lines showing
                    drawLine(segStartY + 0, segStartX + 1, segStartY + 0, segStartX + SEG_LENGTH - 1 - 1, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_ON
            STATE_ON:
                pixInset := 0
                repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                    pixInset++
            STATE_3RD_OFF:  ' smallest 2 lines showing
                    drawLine(segStartY + 0, segStartX + 1, segStartY + 0, segStartX + SEG_LENGTH - 1 - 1, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_6TH_OFF
            STATE_6TH_OFF:  ' smallest 1 line showing
                    drawLine(segStartY + 0, segStartX + 2, segStartY + 0, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_OFF
            STATE_OFF:  ' nothing to do since we clear segment first
            OTHER:
                debug("STATE(hrzT) not yet implemented (", udec_(newstate), ")")
    else
        ' pointing up
        if newState <> STATE_ON
            ' clear the segment
            pixInset := SEG_WIDTH - 1
            repeat rowIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
                pixInset --
        case newState
            STATE_3RD_ON:   ' smallest 1 line showing
                    drawLine(segStartY + 2, segStartX + 2, segStartY + 2, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_6TH_ON
            STATE_6TH_ON:   ' smallest 2 lines showing
                    drawLine(segStartY + 2, segStartX + 1, segStartY + 2, segStartX + SEG_LENGTH - 1 - 1, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_ON
            STATE_ON:
                pixInset := SEG_WIDTH - 1
                 repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                    pixInset --
            STATE_3RD_OFF:  ' smallest 2 lines showing
                    drawLine(segStartY + 2, segStartX + 1, segStartY + 2, segStartX + SEG_LENGTH - 1 - 1, segRgbColor)   ' mid
                    drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_6TH_OFF
            STATE_6TH_OFF:  ' smallest 1 line showing
                    drawLine(segStartY + 2, segStartX + 2, segStartY + 2, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                    nextState := STATE_OFF
            STATE_OFF:  ' nothing to do since we clear segment first
            OTHER:
                debug("STATE(hrzB) not yet implemented (", udec_(newstate), ")")

PRI updateMiddleSegment(newState) | pixInset, rowIndex
    'debug("seg:updMidSeg()")
    ' row,col points to upper-left of LENGTH columns by WIDTH rows
    if newState <> STATE_ON
        ' clear the segment
        pixInset := 1
        repeat rowIndex from 0 to SEG_WIDTH - 1
            drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
            pixInset := (pixInset == 1) ? 0 : 1
    case newState
        STATE_3RD_ON:   ' smallest 1 line showing
                nextState := STATE_6TH_ON
        STATE_6TH_ON:   ' smallest 2 lines showing
                drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                nextState := STATE_ON
        STATE_ON:
            pixInset := 1
            repeat rowIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                pixInset := (pixInset == 1) ? 0 : 1
        STATE_3RD_OFF:  ' smallest 2 lines showing
                drawLine(segStartY + 1, segStartX + 2, segStartY + 1, segStartX + SEG_LENGTH - 1 - 2, segRgbColor)   ' shortest
                nextState := STATE_6TH_OFF
        STATE_6TH_OFF:  ' smallest 1 line showing
                nextState := STATE_OFF
        STATE_OFF:  ' nothing to do since we clear segment first
        OTHER:
            debug("STATE(mid) not yet implemented (", udec_(newstate), ")")


PRI drawLine(fmRow, fmColumn, toRow, toColumn, rgbColor) | row, column
    'debug("seg:drwLn fmRC=(", udec_(fmRow), ",", udec_(fmColumn), "), toRC=(", udec_(toRow), ",", udec_(toColumn), "), RGB=(", uhex_long(rgbColor), ")")
    fmRow :=  0 #> fmRow <# screen.MAX_PHYSICAL_ROWS - 1
    fmColumn :=  0 #> fmColumn <# screen.MAX_PHYSICAL_COLUMNS - 1
    toRow :=  0 #> toRow <# screen.MAX_PHYSICAL_ROWS - 1
    toColumn :=  0 #> toColumn <# screen.MAX_PHYSICAL_COLUMNS - 1
    if fmRow == toRow
        ' draw Horizontal Line
        repeat column from fmColumn to toColumn
            pixels.drawPixelAtRCwithRGB(fmRow, column, color.rgbForCValue(rgbColor))
    elseif fmColumn == toColumn
        ' draw Vertical Line
        repeat row from fmRow to toRow
            pixels.drawPixelAtRCwithRGB(row, fmColumn, color.rgbForCValue(rgbColor))
    else
        debug("DIAG lines not implemented !")
        abort


PRI isDebugLocn(nRow, nCol) : status
    ' return T/F where T means we should show debug for this RC
    status := FALSE
    'if (nRow == 31 && nCol < 4) || (nRow < 2 && nCol < 3) || (nRow == 31 && nCol > 61) || (nRow < 2 && nCol > 61)
    if (nRow  > 29)
        status := TRUE ' FALSE  ' turn off debug


CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================

}}
