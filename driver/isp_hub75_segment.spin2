'' =================================================================================================
''
''   File....... isp_hub75_segment.spin2
''   Purpose.... manipulate a single mechanical segment
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 18 Oct 2020
''
'' =================================================================================================

' There are two types of segments  
' one of which is rotated 3 times to get 4 shapes
' the other is the middle segment

' The mechanical segments slide on and back off of screen
' the background is generally black
' 

CON { segment states, names, orientations and such }

#0, SEG_UNKNOWN, SEG_LEFT, SEG_RIGHT, SEG_TOP, SEG_MIDDLE, SEG_BOTTOM
#0, STATE_UNKNOWN, STATE_OFF, STATE_3RD_ON, STATE_6TH_ON, STATE_ON, STATE_3RD_OFF ,STATE_6TH_OFF

SEG_WIDTH = 3
SEG_LENGTH = 11

MAX_BYTES_PER_COLOR = 3

cBlack = $000000

VAR
    long    segOrientation
    long    currentState
    long    nextState
    long    segHeight
    long    segWidth
    long    segStartX
    long    segStartY
    long    segRgbColor    ' TODO add next color for when ea. digit value can be a diff color
    long    desiredEndState

' target screen and geometry thereof
    long    pExtScreen
    long    maxBitRows
    long    maxBitColumns

PUB null()
    '' this is NOT a top level object

PUB setScreen(pScreen, pixRows, pixColumns)
    '' Save the location and size of our external screen buffer
    pExtScreen := pScreen
    maxBitColumns := pixColumns
    maxBitRows := pixRows

PUB placeSegment(row, column, orientation, initialState, rgbColor)
    '' locate a desired segment on our screen. Draw initial segement if state is NOT off
    ' record settings choices we are given extrapolating some
    currentState := STATE_OFF
    segStartX :=  0 #> column <# maxBitColumns - 1
    segStartY :=  0 #> row <# maxBitRows - 1
    segOrientation := orientation
    segRgbColor := rgbColor
    case orientation
        SEG_TOP..SEG_BOTTOM:
            segHeight := 3
            segWidth := 11
        SEG_LEFT..SEG_RIGHT:
            segHeight := 11
            segWidth := 3
        OTHER:
            debug("SEG: BAD segment type!")
            abort        
    ' if the segment is initially showing, let's draw it!
    if initialState <> STATE_OFF
        updateSegmentToState(initialState)

PUB hideSegment()
    '' start the segment moving to _OFF if not already off
    if currentState <> STATE_OFF
        moveSegmentToState(STATE_OFF)

PUB showSegment()
    '' start the segment moving to _ON if not already on
    if currentState <> STATE_ON
        moveSegmentToState(STATE_ON)


PRI moveSegmentToState(newEndState) | targetState
    '' start sequence of segment updates to desired state
    ' if we are asking to be in a different state then...
    if desiredEndState <> newEndState
        ' if we are not yet at an end state (still moving) then abort
        if currentState <> STATE_OFF && currentState <> STATE_ON
            debug("SEG: state still in motion, ignoring request")
            abort
        if newEndState <> STATE_OFF && newEndState <> STATE_ON
            debug("SEG: BAD end state must be ON or OFF!")
            abort        
        desiredEndState := newEndState
        if desiredEndState == STATE_ON
            targetState := STATE_3RD_ON
        else
            targetState := STATE_3RD_OFF
        updateSegmentToState(targetState)

PRI updateSegmentToState(newState)
    debug("-segm updSegToSt()")
    '' draw segment to specific state (marking the new state as current)
    case segOrientation
        SEG_TOP:
            updateHorizontalSegment(newState)
        SEG_LEFT:
            updateVerticalSegment(newState)
        SEG_RIGHT:
            updateVerticalSegment(newState)
        SEG_BOTTOM:
            updateHorizontalSegment(newState)
        SEG_MIDDLE:
            updateMiddleSegment(newState)
    currentState := newState

PRI updateVerticalSegment(newState) | pixInset, columnIndex
    debug("-segm updVertSeg()")
    ' row,col points to upper-left of WIDTH columns by LENGTH rows
    if segOrientation == SEG_LEFT
        ' pointing right
        case newState
            STATE_OFF:
                pixInset := 0
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, cBlack)
                    pixInset++
            STATE_ON:
                pixInset := 0
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, segRgbColor)
                    pixInset++ 
            OTHER:
                debug("STATE not yet implemented (", udec_(newstate), ")")
    else
       ' pointing left
        case newState
            STATE_OFF:
                pixInset := SEG_WIDTH - 1
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, cBlack)
                    pixInset--
            STATE_ON:
                pixInset := SEG_WIDTH - 1
                repeat columnIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + pixInset, segStartX + columnIndex, segStartY + SEG_LENGTH - 1 - pixInset, segStartX + columnIndex, segRgbColor)
                    pixInset--
            OTHER:
                debug("STATE not yet implemented (", udec_(newstate), ")")

PRI updateHorizontalSegment(newState) | pixInset, rowIndex
    debug("-segm updHorizSeg()")
    ' row,col points to upper-left of LENGTH columns by WIDTH rows
    if segOrientation == SEG_TOP
        ' pointing down
        case newState
            STATE_OFF:
                pixInset := 0
                repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
                    pixInset++
            STATE_ON:
                pixInset := 0
                repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                    pixInset++
            OTHER:
                debug("STATE not yet implemented (", udec_(newstate), ")")
    else
    ' pointing up
        case newState
            STATE_OFF:
                pixInset := SEG_WIDTH - 1
                repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
                    pixInset --
            STATE_ON:
                pixInset := SEG_WIDTH - 1
                 repeat rowIndex from 0 to SEG_WIDTH - 1
                    drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                    pixInset --
            OTHER:
                debug("STATE not yet implemented (", udec_(newstate), ")")

PRI updateMiddleSegment(newState) | pixInset, rowIndex
    debug("-segm updMidSeg()")
    ' row,col points to upper-left of LENGTH columns by WIDTH rows
    case newState
        STATE_OFF:
            pixInset := 1
            repeat rowIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, cBlack)
                pixInset := (pixInset == 1) ? 0 : 1
        STATE_ON:
            pixInset := 1
            repeat rowIndex from 0 to SEG_WIDTH - 1
                drawLine(segStartY + rowIndex, segStartX + pixInset, segStartY + rowIndex, segStartX + SEG_LENGTH - 1 - pixInset, segRgbColor)
                pixInset := (pixInset == 1) ? 0 : 1
        OTHER:
            debug("STATE not yet implemented (", udec_(newstate), ")")

PRI drawLine(fmRow, fmColumn, toRow, toColumn, rgbColor) | row, column
    debug("-segm drawLine()")
    if fmRow == toRow
        ' draw Horizontal Line
        repeat column from fmColumn to toColumn 
            drawPixelAtRCwithRGB(fmRow, column, rgbForCValue(rgbColor))
    elseif fmColumn == toColumn
        ' draw Vertical Line
        repeat row from fmRow to toRow 
            drawPixelAtRCwithRGB(row, fmColumn, rgbForCValue(rgbColor))
    else
        debug("DIAGONAL lines not implemented !")
        abort

PUB drawPixelAtRCwithRGB(row, column, red, green, blue) | rowIndex, columnIndex, colorOffset, pColor
    '' place r,g,b color pixel at r,c
    rowIndex := 0 #> row <# maxBitRows - 1
    columnIndex :=  0 #> column <# maxBitColumns - 1
    colorOffset := ((rowIndex * maxBitColumns) + columnIndex) * MAX_BYTES_PER_COLOR
    pColor := @byte[pExtScreen][colorOffset]
    'if isDebugLocn(row, column)
        'debug("- Screen RC=(", udec_(rowIndex), ", ", udec_(columnIndex), "), ofs=", udec_(colorOffset), ", RGB=(", uhex_(red), uhex_(green), uhex_(blue), ")")
    byte[pColor][0] := red
    byte[pColor][1] := green
    byte[pColor][2] := blue

PUB rgbForCValue(combinedValue) : red, green, blue  '' CONVERT combined color value to r,g,b
    red := (combinedValue & $ff0000) >> 16
    green := (combinedValue & $ff00) >> 8
    blue := (combinedValue & $ff)

CON { license }

{{

  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}

