'' =================================================================================================
''
''   File....... isp_hub75_binFeeds.spin2
''   Purpose.... Manage fill and empty flows in Binary water clock
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 24 Oct 2020
''
'' =================================================================================================

CON

    MAX_SIMULTANEOUS_FEEDS = 14 + 1 ' should only ever have 14:  hours=1+3, minutes=2+3, seconds=2+3 (add 1 extra)
    MAX_DIGITS = 6


OBJ

    hardware                        : "isp_hub75_hwGeometry"
    flows[MAX_SIMULTANEOUS_FEEDS]   : "isp_hub75_binflow"


DAT { initialized data }


VAR { globals }


' target screen and geometry thereof
    long    pExtScreen
    long    maxBitRows
    long    maxBitColumns
    long    defaultColor
    
    byte    isSetup
    byte    nextFlowIndex
    byte    currValue[MAX_DIGITS]
    

PUB null()
    '' This is NOT a top level object

PUB setHMS(hours, minutes, seconds) | byte newValue[MAX_DIGITS], idleFlowIndex, nybbleIndex, bitIndex, bitMask, bitHours, bitMinutes, bitSeconds
    '' set the initial time to be displayed
    'debug("clk:set ", udec(hours), udec(minutes), udec(seconds))
    newValue[0] := hours / 10
    newValue[1] := hours // 10    
    newValue[2] := minutes / 10
    newValue[3] := minutes // 10    
    newValue[4] := seconds / 10
    newValue[5] := seconds // 10    

    ' check for nybbles that are changing value
    repeat nybbleIndex from 0 to MAX_DIGITS - 1
        ' if value changed...
        if currValue[nybbleIndex] <> newValue[nybbleIndex]
            ' check for bit(s) in nybble that are changing...
            repeat bitIndex from 0 to 3
                bitMask := 1 << bitIndex
                'if this bit is changing...
                if currValue[nybbleIndex] & bitMask <> newValue[nybbleIndex] & bitMask
                    ' we need to animate the change, let's get the next avail. flow
                    idleFlowIndex := nextIdleFlow() ' no error return: called routine will abort if NONE avail!
                    ' go start the flow!
                    flows[idleFlowIndex].startFlow(nybbleIndex, currValue[nybbleIndex] & bitMask, newValue[nybbleIndex] & bitMask)
            ' record  ending state for this nybble
            currValue[nybbleIndex] := newValue[nybbleIndex]

PUB isAnimationComplete() : status | flowIndex
    '' Return T/F where T means all segment animations are complete
    status := TRUE
    repeat flowIndex from 0 to MAX_SIMULTANEOUS_FEEDS - 1
        if not flows[flowIndex].isMovementComplete()
            status := FALSE
            quit   ' we have our answer, abort loop

PUB animateStep() | flowIndex
    '' Have each sement do 1 animation step, if one is pending
    if not isAnimationComplete()
        repeat flowIndex from 0 to MAX_SIMULTANEOUS_FEEDS - 1
            flows[flowIndex].animateStep()

PUB setScreen(pScreen) : flowIndex
    '' Save the location of our external screen buffer
    'debug("7s:setScreen")
    pExtScreen := pScreen
    maxBitColumns := hardware.MAX_PANEL_COLUMNS
    maxBitRows := hardware.MAX_PANEL_ROWS
    repeat flowIndex from 0 to MAX_SIMULTANEOUS_FEEDS - 1
        flows[flowIndex].setScreen(pScreen)

PRI nextIdleFlow() : nextIdleFlowIndex | flowsCheckedCount, flowBusyStatus
    flowsCheckedCount := 0
    nextIdleFlowIndex := -1
    repeat 
        flowBusyStatus :=  flows[nextFlowIndex].isInUse()
        if not flowBusyStatus
            nextIdleFlowIndex := nextFlowIndex
            quit
        nextFlowIndex++
        flowsCheckedCount++
        if nextFlowIndex >= MAX_SIMULTANEOUS_FEEDS
            nextFlowIndex := 0
    while flowsCheckedCount < MAX_SIMULTANEOUS_FEEDS
    if flowBusyStatus
        debug("- no INACTIVE FLOWS, aborting")
        abort


CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
 
}}

