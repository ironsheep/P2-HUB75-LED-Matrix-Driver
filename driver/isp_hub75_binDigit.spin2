'' =================================================================================================
''
''   File....... isp_hub75_binDigit.spin2
''   Purpose.... manipulate a column of 4-bits representing a single digit
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2020 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Oct 2020
''   Updated.... 24 Oct 2020
''
'' =================================================================================================

CON

    MAX_BITS = 4

OBJ

    hardware    : "isp_hub75_hwGeometry"
    bits[4]     : "isp_hub75_binBit"

DAT { globals - initialized - class data }


VAR { globals - instance data }
    long    topRow
    long    leftColumn
    long    topGap
    long    bitHeight
    long    bitWidth
    long    vertGap

' target screen and geometry thereof
    long    pExtScreen
    long    maxBitRows
    long    maxBitColumns
    long    fullRgbColor
    long    emptyRgbColor
    
    byte    isSetup

    
PUB null()
    '' This is NOT a top level object

PUB setScreen(pScreen) | bitIndex
    '' Save the location of our external screen buffer
    'debug("dig:setScreen")
    pExtScreen := pScreen
    maxBitColumns := hardware.MAX_PANEL_COLUMNS
    maxBitRows := hardware.MAX_PANEL_ROWS
    if NOT isSetup
        initialize()
    repeat bitIndex from 0 to MAX_BITS - 1
        bits[bitIndex].setScreen(pExtScreen)

PUB placeDigitAtRC(row, column, fullColor, emptyColor) | bitIndex, dispRow, dispCol
    'debug("dig:place @RC(", udec_(row), ",", udec_(column), ") ", uhex_long(fullColor), uhex_long(emptyColor))
    if NOT isSetup
        initialize()
    dispRow := topRow := row
    dispCol := leftColumn := column
    fullRgbColor := fullColor
    emptyRgbColor := emptyColor
    repeat bitIndex from 0 to MAX_BITS - 1
        bits[bitIndex].placeBitAtRC(dispRow, dispCol, 1 << bitIndex, fullColor, emptyColor)
        dispRow += bitHeight + vertGap

PUB setValue(digit) | bitIndex, dispRow, dispCol, bitValue
    'debug("dig:setValue ", ubin(digit))
    '' set a new value for this column [0-15]
    repeat bitIndex from 0 to MAX_BITS - 1
        bitValue := (digit & (1 << (3 - bitIndex))) > 0 ? 1 : 0
        bits[bitIndex].setValue(bitValue)

PUB isMovementComplete() : status | bitIndex
    '' Return T/F where T means all segment animations are complete
    status := TRUE
    repeat bitIndex from 0 to MAX_BITS - 1
        if not bits[bitIndex].isMovementComplete()
            status := FALSE
            quit   ' we have our answer, abort loop

PUB animateStep() | bitIndex
    '' Have each sement do 1 animation step, if one is pending
    if not isMovementComplete()
        repeat bitIndex from 0 to MAX_BITS - 1
            bits[bitIndex].animateStep()

PRI initialize()
    isSetup := TRUE
    topGap := 5
    bitHeight := 4
    bitWidth := 5
    vertGap := 2

CON { license }

{{


 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2020 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
 
}}

